if getgenv().SimpleSpyExecuted and type(getgenv().SimpleSpyShutdown) == "function" then
    getgenv().SimpleSpyShutdown()
end

local realconfigs = {
    logcheckcaller = false,
    autoblock = false,
    funcEnabled = true,
    advancedinfo = false,
    supersecretdevtoggle = false
}

local configs = newproxy(true)
local configsmetatable = getmetatable(configs)

configsmetatable.__index = function(self,index)
    return realconfigs[index]
end

local oth = syn and syn.oth
local unhook = oth and oth.unhook
local hook = oth and oth.hook

local lower = string.lower
local byte = string.byte
local round = math.round
local running = coroutine.running
local resume = coroutine.resume
local status = coroutine.status
local yield = coroutine.yield
local create = coroutine.create
local close = coroutine.close
local OldDebugId = game.GetDebugId
local info = debug.info

local IsA = game.IsA
local tostring = tostring
local tonumber = tonumber
local delay = task.delay
local spawn = task.spawn
local clear = table.clear
local clone = table.clone

local function blankfunction(...)
    return ...
end

local get_thread_identity = (syn and syn.get_thread_identity) or getidentity or getthreadidentity
local set_thread_identity = (syn and syn.set_thread_identity) or setidentity
local islclosure = islclosure or is_l_closure
local threadfuncs = (get_thread_identity and set_thread_identity and true) or false

local getinfo = getinfo or blankfunction
local getupvalues = getupvalues or debug.getupvalues or blankfunction
local getconstants = getconstants or debug.getconstants or blankfunction

local getcustomasset = getsynasset or getcustomasset
local getcallingscript = getcallingscript or blankfunction
local newcclosure = newcclosure or blankfunction
local clonefunction = clonefunction or blankfunction
local cloneref = cloneref or blankfunction
local request = request or syn and syn.request
local makewritable = makewriteable or function(tbl)
    setreadonly(tbl,false)
end
local makereadonly = makereadonly or function(tbl)
    setreadonly(tbl,true)
end
local isreadonly = isreadonly or table.isfrozen

local setclipboard = setclipboard or toclipboard or set_clipboard or (Clipboard and Clipboard.set) or function(...)
    return ErrorPrompt("Attempted to set clipboard: "..(...),true)
end

local hookmetamethod = hookmetamethod or (makewriteable and makereadonly and getrawmetatable) and function(obj: object, metamethod: string, func: Function)
    local old = getrawmetatable(obj)

    if hookfunction then
        return hookfunction(old[metamethod],func)
    else
        local oldmetamethod = old[metamethod]
        makewriteable(old)
        old[metamethod] = func
        makereadonly(old)
        return oldmetamethod
    end
end

local function Create(instance, properties, children)
    local obj = Instance.new(instance)

    for i, v in next, properties or {} do
        obj[i] = v
        for _, child in next, children or {} do
            child.Parent = obj;
        end
    end
    return obj;
end

local function SafeGetService(service)
    return cloneref(game:GetService(service))
end

local function Search(logtable,tbl)
    table.insert(logtable,tbl)
    
    for i,v in tbl do
        if type(v) == "table" then
            return table.find(logtable,v) ~= nil or Search(v)
        end
    end
end

local function IsCyclicTable(tbl)
	local checkedtables = {}

    local function SearchTable(tbl)
        table.insert(checkedtables,tbl)
        
        for i,v in next, tbl do
            if type(v) == "table" then
                return table.find(checkedtables,v) and true or SearchTable(v)
            end
        end
    end

	return SearchTable(tbl)
end

local function deepclone(args: table, copies: table): table
    local copy = nil
    copies = copies or {}

    if type(args) == 'table' then
        if copies[args] then
            copy = copies[args]
        else
            copy = {}
            copies[args] = copy
            for i, v in next, args do
                copy[deepclone(i, copies)] = deepclone(v, copies)
            end
        end
    elseif typeof(args) == "Instance" then
        copy = cloneref(args)
    else
        copy = args
    end
    return copy
end

local function rawtostring(userdata)
	if type(userdata) == "table" or typeof(userdata) == "userdata" then
		local rawmetatable = getrawmetatable(userdata)
		local cachedstring = rawmetatable and rawget(rawmetatable, "__tostring")

		if cachedstring then
            local wasreadonly = isreadonly(rawmetatable)
            if wasreadonly then
                makewritable(rawmetatable)
            end
			rawset(rawmetatable, "__tostring", nil)
			local safestring = tostring(userdata)
			rawset(rawmetatable, "__tostring", cachedstring)
            if wasreadonly then
                makereadonly(rawmetatable)
            end
			return safestring
		end
	end
	return tostring(userdata)
end

local CoreGui = SafeGetService("CoreGui")
local Players = SafeGetService("Players")
local RunService = SafeGetService("RunService")
local UserInputService = SafeGetService("UserInputService")
local TweenService = SafeGetService("TweenService")
local ContentProvider = SafeGetService("ContentProvider")
local TextService = SafeGetService("TextService")
local http = SafeGetService("HttpService")
local GuiInset = game:GetService("GuiService"):GetGuiInset() :: Vector2

local function jsone(str) return http:JSONEncode(str) end
local function jsond(str)
    local suc,err = pcall(http.JSONDecode,http,str)
    return suc and err or suc
end

function ErrorPrompt(Message,state)
    if getrenv then
        local ErrorPrompt = getrenv().require(CoreGui:WaitForChild("RobloxGui"):WaitForChild("Modules"):WaitForChild("ErrorPrompt"))
        local prompt = ErrorPrompt.new("Default",{HideErrorCode = true})
        local ErrorStoarge = Create("ScreenGui",{Parent = CoreGui,ResetOnSpawn = false})
        local thread = state and running()
        prompt:setParent(ErrorStoarge)
        prompt:setErrorTitle("Simple Spy V3 Error")
        prompt:updateButtons({{
            Text = "Proceed",
            Callback = function()
                prompt:_close()
                ErrorStoarge:Destroy()
                if thread then
                    resume(thread)
                end
            end,
            Primary = true
        }}, 'Default')
        prompt:_open(Message)
        if thread then
            yield(thread)
        end
    else
        warn(Message)
    end
end

local Highlight = (isfile and loadfile and isfile("Highlight.lua") and loadfile("Highlight.lua")()) or loadstring(game:HttpGet("https://raw.githubusercontent.com/78n/SimpleSpy/main/Highlight.lua"))()

-- Мобильный интерфейс
local SimpleSpy3 = Create("ScreenGui",{
    ResetOnSpawn = false,
    DisplayOrder = 999
})

local MainFrame = Create("Frame",{
    Parent = SimpleSpy3,
    BackgroundColor3 = Color3.fromRGB(20, 20, 20),
    BackgroundTransparency = 0.2,
    Position = UDim2.new(0.5, -200, 0.5, -150),
    Size = UDim2.new(0, 400, 0, 500),
    ClipsDescendants = true,
    Active = true
})

-- Закругленные углы
local UICorner = Create("UICorner",{
    Parent = MainFrame,
    CornerRadius = UDim.new(0, 12)
})

local TopBar = Create("Frame",{
    Parent = MainFrame,
    BackgroundColor3 = Color3.fromRGB(30, 30, 30),
    BorderSizePixel = 0,
    Size = UDim2.new(1, 0, 0, 40),
    ZIndex = 2
})

local UICornerTop = Create("UICorner",{
    Parent = TopBar,
    CornerRadius = UDim.new(0, 12)
})

local Title = Create("TextLabel",{
    Parent = TopBar,
    Text = "Remote Spy Mobile",
    Position = UDim2.new(0, 50, 0, 0),
    Size = UDim2.new(1, -100, 1, 0),
    BackgroundTransparency = 1,
    TextColor3 = Color3.new(1, 1, 1),
    Font = Enum.Font.SourceSansBold,
    TextSize = 18
})

-- Круглые кнопки управления
local CloseButton = Create("TextButton",{
    Parent = TopBar,
    BackgroundColor3 = Color3.fromRGB(255, 60, 60),
    Position = UDim2.new(1, -35, 0.5, -12),
    Size = UDim2.new(0, 24, 0, 24),
    Text = "",
    ZIndex = 3
})

local UICornerClose = Create("UICorner",{
    Parent = CloseButton,
    CornerRadius = UDim.new(1, 0)
})

local MinimizeButton = Create("TextButton",{
    Parent = TopBar,
    BackgroundColor3 = Color3.fromRGB(255, 180, 60),
    Position = UDim2.new(1, -65, 0.5, -12),
    Size = UDim2.new(0, 24, 0, 24),
    Text = "",
    ZIndex = 3
})

local UICornerMinimize = Create("UICorner",{
    Parent = MinimizeButton,
    CornerRadius = UDim.new(1, 0)
})

local MaximizeButton = Create("TextButton",{
    Parent = TopBar,
    BackgroundColor3 = Color3.fromRGB(60, 180, 60),
    Position = UDim2.new(1, -95, 0.5, -12),
    Size = UDim2.new(0, 24, 0, 24),
    Text = "",
    ZIndex = 3
})

local UICornerMaximize = Create("UICorner",{
    Parent = MaximizeButton,
    CornerRadius = UDim.new(1, 0)
})

-- Поиск
local SearchBar = Create("TextBox",{
    Parent = MainFrame,
    BackgroundColor3 = Color3.fromRGB(40, 40, 40),
    BackgroundTransparency = 0.5,
    Position = UDim2.new(0, 10, 0, 50),
    Size = UDim2.new(1, -20, 0, 30),
    Text = "Search remotes...",
    TextColor3 = Color3.new(1, 1, 1),
    PlaceholderColor3 = Color3.fromRGB(180, 180, 180),
    Font = Enum.Font.SourceSans,
    TextSize = 16,
    ClearTextOnFocus = false
})

local UICornerSearch = Create("UICorner",{
    Parent = SearchBar,
    CornerRadius = UDim.new(0, 8)
})

-- Список ремотов
local RemoteList = Create("ScrollingFrame",{
    Parent = MainFrame,
    BackgroundTransparency = 1,
    Position = UDim2.new(0, 10, 0, 90),
    Size = UDim2.new(1, -20, 0.5, -100),
    CanvasSize = UDim2.new(0, 0, 0, 0),
    ScrollBarThickness = 4
})

local UIListLayout = Create("UIListLayout",{
    Parent = RemoteList,
    SortOrder = Enum.SortOrder.LayoutOrder,
    Padding = UDim.new(0, 5)
})

-- Кодовое окно
local CodeBoxFrame = Create("Frame",{
    Parent = MainFrame,
    BackgroundColor3 = Color3.fromRGB(25, 25, 25),
    BackgroundTransparency = 0.3,
    Position = UDim2.new(0, 10, 0.5, 10),
    Size = UDim2.new(1, -20, 0.3, 0),
    ClipsDescendants = true
})

local UICornerCode = Create("UICorner",{
    Parent = CodeBoxFrame,
    CornerRadius = UDim.new(0, 8)
})

local CodeBox = Create("Frame",{
    Parent = CodeBoxFrame,
    BackgroundColor3 = Color3.new(0.0823529, 0.0745098, 0.0784314),
    BorderSizePixel = 0,
    Size = UDim2.new(1, 0, 1, 0)
})

-- Вращающаяся панель кнопок
local ButtonCarousel = Create("Frame",{
    Parent = MainFrame,
    BackgroundTransparency = 1,
    Position = UDim2.new(0, 10, 0.8, 10),
    Size = UDim2.new(1, -20, 0.2, -20)
})

local CarouselInner = Create("Frame",{
    Parent = ButtonCarousel,
    BackgroundTransparency = 1,
    Size = UDim2.new(1, 0, 1, 0)
})

local UIListLayoutCarousel = Create("UIListLayout",{
    Parent = CarouselInner,
    FillDirection = Enum.FillDirection.Horizontal,
    HorizontalAlignment = Enum.HorizontalAlignment.Center,
    SortOrder = Enum.SortOrder.LayoutOrder,
    Padding = UDim.new(0, 10)
})

local ToolTip = Create("Frame",{
    Parent = SimpleSpy3,
    BackgroundColor3 = Color3.fromRGB(26, 26, 26),
    BackgroundTransparency = 0.1,
    BorderColor3 = Color3.new(1, 1, 1),
    Size = UDim2.new(0, 200, 0, 50),
    ZIndex = 3,
    Visible = false
})

local TextLabel = Create("TextLabel",{
    Parent = ToolTip,
    BackgroundColor3 = Color3.new(1, 1, 1),
    BackgroundTransparency = 1,
    Position = UDim2.new(0, 2, 0, 2),
    Size = UDim2.new(0, 196, 0, 46),
    ZIndex = 3,
    Font = Enum.Font.SourceSans,
    Text = "This is some slightly longer text.",
    TextColor3 = Color3.new(1, 1, 1),
    TextSize = 14,
    TextWrapped = true,
    TextXAlignment = Enum.TextXAlignment.Left,
    TextYAlignment = Enum.TextYAlignment.Top
})

-------------------------------------------------------------------------------

local selectedColor = Color3.new(0.321569, 0.333333, 1)
local deselectedColor = Color3.new(0.8, 0.8, 0.8)
local layoutOrderNum = 999999999
local mainClosing = false
local closed = false
local sideClosing = false
local sideClosed = false
local maximized = false
local logs = {}
local selected = nil
local blacklist = {}
local blocklist = {}
local getNil = false
local connectedRemotes = {}
local toggle = false
local prevTables = {}
local remoteLogs = {}
getgenv().SIMPLESPYCONFIG_MaxRemotes = 300
local indent = 4
local scheduled = {}
local schedulerconnect
local SimpleSpy = {}
local topstr = ""
local bottomstr = ""
local remotesFadeIn
local rightFadeIn
local codebox
local p
local getnilrequired = false
local history = {}
local excluding = {}
local mouseInGui = false
local connections = {}
local DecompiledScripts = {}
local generation = {}
local running_threads = {}
local originalnamecall

local remoteEvent = Instance.new("RemoteEvent",Storage)
local remoteFunction = Instance.new("RemoteFunction",Storage)
local NamecallHandler = Instance.new("BindableEvent",Storage)
local IndexHandler = Instance.new("BindableEvent",Storage)
local GetDebugIdHandler = Instance.new("BindableFunction",Storage)

local originalEvent = remoteEvent.FireServer
local originalFunction = remoteFunction.InvokeServer
local GetDebugIDInvoke = GetDebugIdHandler.Invoke

function GetDebugIdHandler.OnInvoke(obj: Instance)
    return OldDebugId(obj)
end

local function ThreadGetDebugId(obj: Instance): string 
    return GetDebugIDInvoke(GetDebugIdHandler,obj)
end

local synv3 = false

if syn and identifyexecutor then
    local _, version = identifyexecutor()
    if (version and version:sub(1, 2) == 'v3') then
        synv3 = true
    end
end

xpcall(function()
    if isfile and readfile and isfolder and makefolder then
        local cachedconfigs = isfile("SimpleSpy//Settings.json") and jsond(readfile("SimpleSpy//Settings.json"))

        if cachedconfigs then
            for i,v in next, realconfigs do
                if cachedconfigs[i] == nil then
                    cachedconfigs[i] = v
                end
            end
            realconfigs = cachedconfigs
        end

        if not isfolder("SimpleSpy") then
            makefolder("SimpleSpy")
        end
        if not isfolder("SimpleSpy//Assets") then
            makefolder("SimpleSpy//Assets")
        end
        if not isfile("SimpleSpy//Settings.json") then
            writefile("SimpleSpy//Settings.json",jsone(realconfigs))
        end

        configsmetatable.__newindex = function(self,index,newindex)
            realconfigs[index] = newindex
            writefile("SimpleSpy//Settings.json",jsone(realconfigs))
        end
    else
        configsmetatable.__newindex = function(self,index,newindex)
            realconfigs[index] = newindex
        end
    end
end,function(err)
    ErrorPrompt(("An error has occured: (%s)"):format(err))
end)

local function logthread(thread: thread)
    table.insert(running_threads,thread)
end

function clean()
    local max = getgenv().SIMPLESPYCONFIG_MaxRemotes
    if not typeof(max) == "number" and math.floor(max) ~= max then
        max = 500
    end
    if #remoteLogs > max then
        for i = 100, #remoteLogs do
            local v = remoteLogs[i]
            if typeof(v[1]) == "RBXScriptConnection" then
                v[1]:Disconnect()
            end
            if typeof(v[2]) == "Instance" then
                v[2]:Destroy()
            end
        end
        local newLogs = {}
        for i = 1, 100 do
            table.insert(newLogs, remoteLogs[i])
        end
        remoteLogs = newLogs
    end
end

local function ThreadIsNotDead(thread: thread): boolean
    return not status(thread) == "dead"
end

function scaleToolTip()
    local size = TextService:GetTextSize(TextLabel.Text, TextLabel.TextSize, TextLabel.Font, Vector2.new(196, math.huge))
    TextLabel.Size = UDim2.new(0, size.X, 0, size.Y)
    ToolTip.Size = UDim2.new(0, size.X + 4, 0, size.Y + 4)
end

function onToggleButtonHover()
    if not toggle then
        TweenService:Create(Title, TweenInfo.new(0.5), {TextColor3 = Color3.fromRGB(252, 51, 51)}):Play()
    else
        TweenService:Create(Title, TweenInfo.new(0.5), {TextColor3 = Color3.fromRGB(68, 206, 91)}):Play()
    end
end

function onToggleButtonUnhover()
    TweenService:Create(Title, TweenInfo.new(0.5), {TextColor3 = Color3.new(1, 1, 1)}):Play()
end

function onXButtonHover()
    TweenService:Create(CloseButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(255, 100, 100)}):Play()
end

function onXButtonUnhover()
    TweenService:Create(CloseButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(255, 60, 60)}):Play()
end

function onToggleButtonClick()
    if toggle then
        TweenService:Create(Title, TweenInfo.new(0.5), {TextColor3 = Color3.fromRGB(252, 51, 51)}):Play()
    else
        TweenService:Create(Title, TweenInfo.new(0.5), {TextColor3 = Color3.fromRGB(68, 206, 91)}):Play()
    end
    toggleSpyMethod()
end

function connectResize()
    if not workspace.CurrentCamera then
        workspace:GetPropertyChangedSignal("CurrentCamera"):Wait()
    end
    local lastCam = workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(bringBackOnResize)
    workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
        lastCam:Disconnect()
        if typeof(lastCam) == 'Connection' then
            lastCam:Disconnect()
        end
        lastCam = workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(bringBackOnResize)
    end)
end

function bringBackOnResize()
    validateSize()
    if sideClosed then
        minimizeSize()
    else
        maximizeSize()
    end
    local currentX = MainFrame.AbsolutePosition.X
    local currentY = MainFrame.AbsolutePosition.Y
    local viewportSize = workspace.CurrentCamera.ViewportSize
    if (currentX < 0) or (currentX > (viewportSize.X - (sideClosed and 131 or MainFrame.AbsoluteSize.X))) then
        if currentX < 0 then
            currentX = 0
        else
            currentX = viewportSize.X - (sideClosed and 131 or MainFrame.AbsoluteSize.X)
        end
    end
    if (currentY < 0) or (currentY > (viewportSize.Y - (closed and 19 or MainFrame.AbsoluteSize.Y) - GuiInset.Y)) then
        if currentY < 0 then
            currentY = 0
        else
            currentY = viewportSize.Y - (closed and 19 or MainFrame.AbsoluteSize.Y) - GuiInset.Y
        end
    end
    TweenService.Create(TweenService, MainFrame, TweenInfo.new(0.1), {Position = UDim2.new(0, currentX, 0, currentY)}):Play()
end

-- Перемещение окна пальцем
local function onTouchInput(input, processed)
    if processed then return end
    if input.UserInputType == Enum.UserInputType.Touch then
        local touchPos = input.Position
        local framePos = MainFrame.AbsolutePosition
        local frameSize = MainFrame.AbsoluteSize
        
        -- Проверяем, что касание в пределах верхней панели
        if touchPos.X >= framePos.X and touchPos.X <= framePos.X + frameSize.X and
           touchPos.Y >= framePos.Y and touchPos.Y <= framePos.Y + 40 then
            local startPos = touchPos
            local startFramePos = MainFrame.Position
            
            local connection
            connection = input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    connection:Disconnect()
                else
                    local delta = input.Position - startPos
                    MainFrame.Position = UDim2.new(
                        startFramePos.X.Scale, 
                        startFramePos.X.Offset + delta.X, 
                        startFramePos.Y.Scale, 
                        startFramePos.Y.Offset + delta.Y
                    )
                end
            end)
        end
    end
end

UserInputService.InputBegan:Connect(onTouchInput)

function fadeOut(elements)
    local data = {}
    for _, v in next, elements do
        if typeof(v) == "Instance" and v:IsA("GuiObject") and v.Visible then
            spawn(function()
                data[v] = {
                    BackgroundTransparency = v.BackgroundTransparency
                }
                TweenService:Create(v, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
                if v:IsA("TextBox") or v:IsA("TextButton") or v:IsA("TextLabel") then
                    data[v].TextTransparency = v.TextTransparency
                    TweenService:Create(v, TweenInfo.new(0.5), {TextTransparency = 1}):Play()
                elseif v:IsA("ImageButton") or v:IsA("ImageLabel") then
                    data[v].ImageTransparency = v.ImageTransparency
                    TweenService:Create(v, TweenInfo.new(0.5), {ImageTransparency = 1}):Play()
                end
                delay(0.5,function()
                    v.Visible = false
                    for i, x in next, data[v] do
                        v[i] = x
                    end
                    data[v] = true
                end)
            end)
        end
    end
    return function()
        for i, _ in next, data do
            spawn(function()
                local properties = {
                    BackgroundTransparency = i.BackgroundTransparency
                }
                i.BackgroundTransparency = 1
                TweenService:Create(i, TweenInfo.new(0.5), {BackgroundTransparency = properties.BackgroundTransparency}):Play()
                if i:IsA("TextBox") or i:IsA("TextButton") or i:IsA("TextLabel") then
                    properties.TextTransparency = i.TextTransparency
                    i.TextTransparency = 1
                    TweenService:Create(i, TweenInfo.new(0.5), {TextTransparency = properties.TextTransparency}):Play()
                elseif i:IsA("ImageButton") or i:IsA("ImageLabel") then
                    properties.ImageTransparency = i.ImageTransparency
                    i.ImageTransparency = 1
                    TweenService:Create(i, TweenInfo.new(0.5), {ImageTransparency = properties.ImageTransparency}):Play()
                end
                i.Visible = true
            end)
        end
    end
end

function toggleMinimize(override)
    if mainClosing and not override or maximized then
        return
    end
    mainClosing = true
    closed = not closed
    if closed then
        if not sideClosed then
            toggleSideTray(true)
        end
        remotesFadeIn = fadeOut(MainFrame:GetDescendants())
        TweenService:Create(MainFrame, TweenInfo.new(0.5), {Size = UDim2.new(0, 400, 0, 40)}):Play()
        wait(0.5)
    else
        TweenService:Create(MainFrame, TweenInfo.new(0.5), {Size = UDim2.new(0, 400, 0, 500)}):Play()
        wait(0.5)
        if remotesFadeIn then
            remotesFadeIn()
            remotesFadeIn = nil
        end
        bringBackOnResize()
    end
    mainClosing = false
end

function toggleSideTray(override)
    if sideClosing and not override or maximized then
        return
    end
    sideClosing = true
    sideClosed = not sideClosed
    if sideClosed then
        rightFadeIn = fadeOut({RemoteList, CodeBoxFrame, ButtonCarousel})
        wait(0.5)
        minimizeSize(0.5)
        wait(0.5)
        RemoteList.Visible = false
        CodeBoxFrame.Visible = false
        ButtonCarousel.Visible = false
    else
        if closed then
            toggleMinimize(true)
        end
        RemoteList.Visible = true
        CodeBoxFrame.Visible = true
        ButtonCarousel.Visible = true
        maximizeSize(0.5)
        wait(0.5)
        if rightFadeIn then
            rightFadeIn()
        end
        bringBackOnResize()
    end
    sideClosing = false
end

function toggleMaximize()
    if not sideClosed and not maximized then
        maximized = true
        local disable = Instance.new("TextButton")
        local prevSize = UDim2.new(0, CodeBoxFrame.AbsoluteSize.X, 0, CodeBoxFrame.AbsoluteSize.Y)
        local prevPos = UDim2.new(0,CodeBoxFrame.AbsolutePosition.X, 0, CodeBoxFrame.AbsolutePosition.Y)
        disable.Size = UDim2.new(1, 0, 1, 0)
        disable.BackgroundColor3 = Color3.new()
        disable.BorderSizePixel = 0
        disable.Text = 0
        disable.ZIndex = 3
        disable.BackgroundTransparency = 1
        disable.AutoButtonColor = false
        CodeBoxFrame.ZIndex = 4
        CodeBoxFrame.Position = prevPos
        CodeBoxFrame.Size = prevSize
        TweenService:Create(CodeBoxFrame, TweenInfo.new(0.5), {Size = UDim2.new(0.5, 0, 0.5, 0), Position = UDim2.new(0.25, 0, 0.25, 0)}):Play()
        TweenService:Create(disable, TweenInfo.new(0.5), {BackgroundTransparency = 0.5}):Play()
        disable.MouseButton1Click:Connect(function()
            if UserInputService:GetMouseLocation().Y + GuiInset.Y >= CodeBoxFrame.AbsolutePosition.Y and UserInputService:GetMouseLocation().Y + GuiInset.Y <= CodeBoxFrame.AbsolutePosition.Y + CodeBoxFrame.AbsoluteSize.Y and UserInputService:GetMouseLocation().X >= CodeBoxFrame.AbsolutePosition.X and UserInputService:GetMouseLocation().X <= CodeBoxFrame.AbsolutePosition.X + CodeBoxFrame.AbsoluteSize.X then
                return
            end
            TweenService:Create(CodeBoxFrame, TweenInfo.new(0.5), {Size = prevSize, Position = prevPos}):Play()
            TweenService:Create(disable, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
            wait(0.5)
            disable:Destroy()
            CodeBoxFrame.Size = UDim2.new(1, 0, 0.3, 0)
            CodeBoxFrame.Position = UDim2.new(0, 10, 0.5, 10)
            CodeBoxFrame.ZIndex = 0
            maximized = false
        end)
    end
end

function isInResizeRange(p)
    local relativeP = p - MainFrame.AbsolutePosition
    local range = 5
    if relativeP.X >= MainFrame.AbsoluteSize.X - range and relativeP.Y >= MainFrame.AbsoluteSize.Y - range
        and relativeP.X <= MainFrame.AbsoluteSize.X and relativeP.Y <= MainFrame.AbsoluteSize.Y then
        return true, 'B'
    elseif relativeP.X >= MainFrame.AbsoluteSize.X - range and relativeP.X <= MainFrame.AbsoluteSize.X then
        return true, 'X'
    elseif relativeP.Y >= MainFrame.AbsoluteSize.Y - range and relativeP.Y <= MainFrame.AbsoluteSize.Y then
        return true, 'Y'
    end
    return false
end

function isInDragRange(p)
    local relativeP = p - MainFrame.AbsolutePosition
    local topbarAS = TopBar.AbsoluteSize
    return relativeP.X <= topbarAS.X - CloseButton.AbsoluteSize.X * 3 and relativeP.X >= 0 and relativeP.Y <= topbarAS.Y and relativeP.Y >= 0 or false
end

local customCursor = Create("ImageLabel",{Parent = SimpleSpy3,Visible = false,Size = UDim2.fromOffset(200, 200),ZIndex = 1e9,BackgroundTransparency = 1,Image = "",Parent = SimpleSpy3})

function mouseEntered()
    local con = connections["SIMPLESPY_CURSOR"]
    if con then
        con:Disconnect()
        connections["SIMPLESPY_CURSOR"] = nil
    end
    connections["SIMPLESPY_CURSOR"] = RunService.RenderStepped:Connect(function()
        UserInputService.MouseIconEnabled = not mouseInGui
        customCursor.Visible = mouseInGui
        if mouseInGui and getgenv().SimpleSpyExecuted then
            local mouseLocation = UserInputService:GetMouseLocation() - GuiInset
            customCursor.Position = UDim2.fromOffset(mouseLocation.X - customCursor.AbsoluteSize.X / 2, mouseLocation.Y - customCursor.AbsoluteSize.Y / 2)
            local inRange, type = isInResizeRange(mouseLocation)
            if inRange and not closed then
                if not sideClosed then
                    customCursor.Image = type == 'B' and "rbxassetid://6065821980" or type == 'X' and "rbxassetid://6065821086" or type == 'Y' and "rbxassetid://6065821596"
                elseif type == 'Y' or type == 'B' then
                    customCursor.Image = "rbxassetid://6065821596"
                end
            elseif customCursor.Image ~= "rbxassetid://6065775281" then
                customCursor.Image = "rbxassetid://6065775281"
            end
        else
            connections["SIMPLESPY_CURSOR"]:Disconnect()
        end
    end)
end

function mouseMoved()
    local mousePos = UserInputService:GetMouseLocation() - GuiInset
    if not closed
    and mousePos.X >= MainFrame.AbsolutePosition.X and mousePos.X <= MainFrame.AbsolutePosition.X + MainFrame.AbsoluteSize.X
    and mousePos.Y >= MainFrame.AbsolutePosition.Y and mousePos.Y <= MainFrame.AbsolutePosition.Y + MainFrame.AbsoluteSize.Y then
        if not mouseInGui then
            mouseInGui = true
            mouseEntered()
        end
    else
        mouseInGui = false
    end
end

function maximizeSize(speed)
    if not speed then
        speed = 0.05
    end
    TweenService:Create(MainFrame, TweenInfo.new(speed), {Size = UDim2.new(0, 400, 0, 40)}):Play()
end

function validateSize()
    local x, y = MainFrame.AbsoluteSize.X, MainFrame.AbsoluteSize.Y
    local screenSize = workspace.CurrentCamera.ViewportSize
    if x + MainFrame.AbsolutePosition.X > screenSize.X then
        if screenSize.X - MainFrame.AbsolutePosition.X >= 400 then
            x = screenSize.X - MainFrame.AbsolutePosition.X
        else
            x = 400
        end
    elseif y + MainFrame.AbsolutePosition.Y > screenSize.Y then
        if screenSize.X - MainFrame.AbsolutePosition.Y >= 500 then
            y = screenSize.Y - MainFrame.AbsolutePosition.Y
        else
            y = 500
        end
    end
    MainFrame.Size = UDim2.fromOffset(x, y)
end

-- Система поиска по ремотам
local function filterRemotes(searchText)
    searchText = searchText:lower()
    for _, child in ipairs(RemoteList:GetChildren()) do
        if not child:IsA("UIListLayout") then
            local remoteName = child.Text:lower()
            if remoteName:find(searchText, 1, true) then
                child.Visible = true
            else
                child.Visible = false
            end
        end
    end
end

SearchBar.Focused:Connect(function()
    if SearchBar.Text == "Search remotes..." then
        SearchBar.Text = ""
    end
end)

SearchBar.FocusLost:Connect(function()
    if SearchBar.Text == "" then
        SearchBar.Text = "Search remotes..."
    end
end)

SearchBar:GetPropertyChangedSignal("Text"):Connect(function()
    if SearchBar.Text ~= "Search remotes..." then
        filterRemotes(SearchBar.Text)
    end
end)

function backgroundUserInput(input)
    local mousePos = UserInputService:GetMouseLocation() - GuiInset
    local inResizeRange, type = isInResizeRange(mousePos)
    if input.UserInputType == Enum.UserInputType.MouseButton1 and inResizeRange then
        local lastPos = UserInputService:GetMouseLocation()
        local offset = MainFrame.AbsoluteSize - lastPos
        local currentPos = lastPos + offset
        if not connections["SIMPLESPY_RESIZE"] then
            connections["SIMPLESPY_RESIZE"] = RunService.RenderStepped:Connect(function()
                local newPos = UserInputService:GetMouseLocation()
                if newPos ~= lastPos then
                    local currentX = (newPos + offset).X
                    local currentY = (newPos + offset).Y
                    if currentX < 400 then
                        currentX = 400
                    end
                    if currentY < 500 then
                        currentY = 500
                    end
                    currentPos = Vector2.new(currentX, currentY)
                    MainFrame.Size = UDim2.fromOffset((not sideClosed and not closed and (type == "X" or type == "B")) and currentPos.X or MainFrame.AbsoluteSize.X, (not closed and (type == "Y" or type == "B")) and currentPos.Y or MainFrame.AbsoluteSize.Y)
                    validateSize()
                    if sideClosed then
                        minimizeSize()
                    else
                        maximizeSize()
                    end
                    lastPos = newPos
                end
            end)
        end
        table.insert(connections, UserInputService.InputEnded:Connect(function(inputE)
            if input == inputE then
                if connections["SIMPLESPY_RESIZE"] then
                    connections["SIMPLESPY_RESIZE"]:Disconnect()
                    connections["SIMPLESPY_RESIZE"] = nil
                end
            end
        end))
    elseif isInDragRange(mousePos) then
        onBarInput(input)
    end
end

function getPlayerFromInstance(instance)
    for _, v in next, Players:GetPlayers() do
        if v.Character and (instance:IsDescendantOf(v.Character) or instance == v.Character) then
            return v
        end
    end
end

function eventSelect(frame)
    if selected and selected.Log then
        if selected.Button then
            spawn(function()
                TweenService:Create(selected.Button, TweenInfo.new(0.5), {BackgroundColor3 = Color3.fromRGB(0, 0, 0)}):Play()
            end)
        end
        selected = nil
    end
    for _, v in next, logs do
        if frame == v.Log then
            selected = v
        end
    end
    if selected and selected.Log then
        spawn(function()
            TweenService:Create(frame.Button, TweenInfo.new(0.5), {BackgroundColor3 = Color3.fromRGB(92, 126, 229)}):Play()
        end)
        codebox:setRaw(selected.GenScript)
    end
    if sideClosed then
        toggleSideTray()
    end
end

function updateRemoteCanvas()
    RemoteList.CanvasSize = UDim2.fromOffset(UIListLayout.AbsoluteContentSize.X, UIListLayout.AbsoluteContentSize.Y)
end

function makeToolTip(enable, text)
    if enable and text then
        if ToolTip.Visible then
            ToolTip.Visible = false
            local tooltip = connections["ToolTip"]
            if tooltip then
                tooltip:Disconnect()
            end
        end
        local first = true
        connections["ToolTip"] = RunService.RenderStepped:Connect(function()
            local MousePos = UserInputService:GetMouseLocation()
            local topLeft = MousePos + Vector2.new(20, -15)
            local bottomRight = topLeft + ToolTip.AbsoluteSize
            local ViewportSize = workspace.CurrentCamera.ViewportSize
            local ViewportSizeX = ViewportSize.X
            local ViewportSizeY = ViewportSize.Y

            if topLeft.X < 0 then
                topLeft = Vector2.new(0, topLeft.Y)
            elseif bottomRight.X > ViewportSizeX then
                topLeft = Vector2.new(ViewportSizeX - ToolTip.AbsoluteSize.X, topLeft.Y)
            end
            if topLeft.Y < 0 then
                topLeft = Vector2.new(topLeft.X, 0)
            elseif bottomRight.Y > ViewportSizeY - 35 then
                topLeft = Vector2.new(topLeft.X, ViewportSizeY - ToolTip.AbsoluteSize.Y - 35)
            end
            if topLeft.X <= MousePos.X and topLeft.Y <= MousePos.Y then
                topLeft = Vector2.new(MousePos.X - ToolTip.AbsoluteSize.X - 2, MousePos.Y - ToolTip.AbsoluteSize.Y - 2)
            end
            if first then
                ToolTip.Position = UDim2.fromOffset(topLeft.X, topLeft.Y)
                first = false
            else
                ToolTip:TweenPosition(UDim2.fromOffset(topLeft.X, topLeft.Y), "Out", "Linear", 0.1)
            end
        end)
        TextLabel.Text = text
        TextLabel.TextScaled = true
        ToolTip.Visible = true
        return
    else
        if ToolTip.Visible then
            ToolTip.Visible = false
            local tooltip = connections["ToolTip"]
            if tooltip then
                tooltip:Disconnect()
            end
        end
    end
end

function newButton(name, description, onClick)
    local ButtonTemplate = Create("TextButton", {
        Parent = CarouselInner,
        BackgroundColor3 = Color3.fromRGB(50, 50, 50),
        BackgroundTransparency = 0.5,
        Size = UDim2.new(0, 80, 0, 30),
        Text = name,
        TextColor3 = Color3.new(1, 1, 1),
        Font = Enum.Font.SourceSans,
        TextSize = 14,
        AutoButtonColor = false
    })

    local UICornerButton = Create("UICorner", {
        Parent = ButtonTemplate,
        CornerRadius = UDim.new(0, 8)
    })

    ButtonTemplate.MouseEnter:Connect(function()
        makeToolTip(true, description())
    end)
    ButtonTemplate.MouseLeave:Connect(function()
        makeToolTip(false)
    end)
    ButtonTemplate.AncestryChanged:Connect(function()
        makeToolTip(false)
    end)
    ButtonTemplate.MouseButton1Click:Connect(function(...)
        logthread(running())
        onClick(ButtonTemplate, ...)
    end)
end

function newRemote(type, data)
    if layoutOrderNum < 1 then layoutOrderNum = 999999999 end
    local remote = data.remote
    local callingscript = data.callingscript

    local RemoteTemplate = Create("TextButton", {
        LayoutOrder = layoutOrderNum,
        Parent = RemoteList,
        BackgroundColor3 = Color3.fromRGB(40, 40, 40),
        BackgroundTransparency = 0.5,
        Size = UDim2.new(1, 0, 0, 30),
        Text = remote.Name,
        TextColor3 = Color3.new(1, 1, 1),
        Font = Enum.Font.SourceSans,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        AutoButtonColor = false
    })

    local UICornerRemote = Create("UICorner", {
        Parent = RemoteTemplate,
        CornerRadius = UDim.new(0, 6)
    })

    local ColorBar = Create("Frame", {
        Name = "ColorBar",
        Parent = RemoteTemplate,
        BackgroundColor3 = (type == "event" and Color3.fromRGB(255, 242, 0)) or Color3.fromRGB(99, 86, 245),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 5, 0.5, -8),
        Size = UDim2.new(0, 16, 0, 16),
        ZIndex = 2
    })

    local UICornerColor = Create("UICorner", {
        Parent = ColorBar,
        CornerRadius = UDim.new(1, 0)
    })

    local log = {
        Name = remote.Name,
        Function = data.infofunc or "--Function Info is disabled",
        Remote = remote,
        DebugId = data.id,
        metamethod = data.metamethod,
        args = data.args,
        Log = RemoteTemplate,
        Button = RemoteTemplate,
        Blocked = data.blocked,
        Source = callingscript,
        returnvalue = data.returnvalue,
        GenScript = "-- Generating, please wait...\n-- (If this message persists, the remote args are likely extremely long)"
    }

    logs[#logs + 1] = log
    local connect = RemoteTemplate.MouseButton1Click:Connect(function()
        logthread(running())
        eventSelect(RemoteTemplate)
        log.GenScript = genScript(log.Remote, log.args)
        if blocked then
            log.GenScript = "-- THIS REMOTE WAS PREVENTED FROM FIRING TO THE SERVER BY SIMPLESPY\n\n" .. log.GenScript
        end
        if selected == log and RemoteTemplate then
            eventSelect(RemoteTemplate)
        end
    end)
    layoutOrderNum -= 1
    table.insert(remoteLogs, 1, {connect, RemoteTemplate})
    clean()
    updateRemoteCanvas()
end

-- Остальные функции (genScript, v2s, v2v, t2s, i2p, getplayer, v2p, formatstr, handlespecials, getScriptFromSrc, schedule, scheduleWait, taskscheduler, remoteHandler, newindex, newnamecall, newFireServer, newInvokeServer, disablehooks, toggleSpy, toggleSpyMethod, shutdown) остаются без изменений

-- Инициализация
if not getgenv().SimpleSpyExecuted then
    local succeeded,err = pcall(function()
        if not RunService:IsClient() then
            error("SimpleSpy cannot run on the server!")
        end
        getgenv().SimpleSpyShutdown = shutdown
        onToggleButtonClick()
        if not hookmetamethod then
            ErrorPrompt("Simple Spy V3 will not function to it's fullest capablity due to your executor not supporting hookmetamethod.",true)
        end
        codebox = Highlight.new(CodeBox)
        logthread(spawn(function()
            local suc,err = pcall(game.HttpGet,game,"https://raw.githubusercontent.com/78n/SimpleSpy/main/UpdateLog.lua")
            codebox:setRaw((suc and err) or "")
        end))
        getgenv().SimpleSpy = SimpleSpy
        getgenv().getNil = function(name,class)
            for _,v in next, getnilinstances() do
                if v.ClassName == class and v.Name == name then
                    return v;
                end
            end
        end
        MainFrame.MouseEnter:Connect(function(...)
            mouseInGui = true
            mouseEntered()
        end)
        MainFrame.MouseLeave:Connect(function(...)
            mouseInGui = false
            mouseEntered()
        end)
        TextLabel:GetPropertyChangedSignal("Text"):Connect(scaleToolTip)
        MinimizeButton.MouseButton1Click:Connect(toggleMinimize)
        MaximizeButton.MouseButton1Click:Connect(toggleSideTray)
        Title.MouseButton1Click:Connect(onToggleButtonClick)
        CloseButton.MouseEnter:Connect(onXButtonHover)
        CloseButton.MouseLeave:Connect(onXButtonUnhover)
        Title.MouseEnter:Connect(onToggleButtonHover)
        Title.MouseLeave:Connect(onToggleButtonUnhover)
        CloseButton.MouseButton1Click:Connect(shutdown)
        table.insert(connections, UserInputService.InputBegan:Connect(backgroundUserInput))
        connectResize()
        SimpleSpy3.Enabled = true
        logthread(spawn(function()
            delay(1,onToggleButtonUnhover)
        end))
        schedulerconnect = RunService.Heartbeat:Connect(taskscheduler)
        bringBackOnResize()
        SimpleSpy3.Parent = (gethui and gethui()) or (syn and syn.protect_gui and syn.protect_gui(SimpleSpy3)) or CoreGui
        logthread(spawn(function()
            local lp = Players.LocalPlayer or Players:GetPropertyChangedSignal("LocalPlayer"):Wait() or Players.LocalPlayer
            generation = {
                [OldDebugId(lp)] = 'game:GetService("Players").LocalPlayer',
                [OldDebugId(lp:GetMouse())] = 'game:GetService("Players").LocalPlayer:GetMouse',
                [OldDebugId(game)] = "game",
                [OldDebugId(workspace)] = "workspace"
            }
        end))
    end)
    if succeeded then
        getgenv().SimpleSpyExecuted = true
    else
        shutdown()
        ErrorPrompt("An error has occured:\n"..rawtostring(err))
        return
    end
else
    SimpleSpy3:Destroy()
    return
end

-- Кнопки действий
newButton("Copy Code", function() return "Click to copy code" end, function()
    setclipboard(codebox:getString())
    TextLabel.Text = "Copied successfully!"
end)

newButton("Copy Remote", function() return "Click to copy the path of the remote" end, function()
    if selected and selected.Remote then
        setclipboard(v2s(selected.Remote))
        TextLabel.Text = "Copied!"
    end
end)

newButton("Run Code", function() return "Click to execute code" end, function()
    local Remote = selected and selected.Remote
    if Remote then
        TextLabel.Text = "Executing..."
        xpcall(function()
            local returnvalue
            if Remote:IsA("RemoteEvent") then
                returnvalue = Remote:FireServer(unpack(selected.args))
            else
                returnvalue = Remote:InvokeServer(unpack(selected.args))
            end
            TextLabel.Text = ("Executed successfully!\n%s"):format(v2s(returnvalue))
        end,function(err)
            TextLabel.Text = ("Execution error!\n%s"):format(err)
        end)
        return
    end
    TextLabel.Text = "Source not found"
end)

newButton("Get Script", function() return "Click to copy calling script to clipboard\nWARNING: Not super reliable, nil == could not find" end, function()
    if selected then
        if not selected.Source then
            selected.Source = rawget(getfenv(selected.Function),"script")
        end
        setclipboard(v2s(selected.Source))
        TextLabel.Text = "Done!"
    end
end)

newButton("Function Info", function() return "Click to view calling function information" end, function()
    local func = selected and selected.Function
    if func then
        local typeoffunc = typeof(func)

        if typeoffunc ~= 'string' then
            codebox:setRaw("--[[Generating Function Info please wait]]")
            RunService.Heartbeat:Wait()
            local lclosure = islclosure(func)
            local SourceScript = rawget(getfenv(func),"script")
            local CallingScript = selected.Source or nil
            local info = {}
            
            info = {
                info = getinfo(func),
                constants = lclosure and deepclone(getconstants(func)) or "N/A --Lua Closure expected got C Closure",
                upvalues = deepclone(getupvalues(func)),
                script = {
                    SourceScript = SourceScript or 'nil',
                    CallingScript = CallingScript or 'nil'
                }
            }
                    
            if configs.advancedinfo then
                local Remote = selected.Remote

                info["advancedinfo"] = {
                    Metamethod = selected.metamethod,
                    DebugId = {
                        SourceScriptDebugId = SourceScript and typeof(SourceScript) == "Instance" and OldDebugId(SourceScript) or "N/A",
                        CallingScriptDebugId = CallingScript and typeof(SourceScript) == "Instance" and OldDebugId(CallingScript) or "N/A",
                        RemoteDebugId = OldDebugId(Remote)
                    },
                    Protos = lclosure and getprotos(func) or "N/A --Lua Closure expected got C Closure"
                }

                if Remote:IsA("RemoteFunction") then
                    info["advancedinfo"]["OnClientInvoke"] = getcallbackmember and (getcallbackmember(Remote,"OnClientInvoke") or "N/A") or "N/A --Missing function getcallbackmember"
                elseif getconnections then
                    info["advancedinfo"]["OnClientEvents"] = {}

                    for i,v in next, getconnections(Remote.OnClientEvent) do
                        info["advancedinfo"]["OnClientEvents"][i] = {
                            Function = v.Function or "N/A",
                            State = v.State or "N/A"
                        }
                    end
                end
            end
            codebox:setRaw("--[[Converting table to string please wait]]")
            selected.Function = v2v({functionInfo = info})
        end
        codebox:setRaw("-- Calling function info\n-- Generated by the SimpleSpy V3 serializer\n\n"..selected.Function)
        TextLabel.Text = "Done! Function info generated by the SimpleSpy V3 Serializer."
    else
        TextLabel.Text = "Error! Selected function was not found."
    end
end)

newButton("Clr Logs", function() return "Click to clear logs" end, function()
    TextLabel.Text = "Clearing..."
    clear(logs)
    for i,v in next, RemoteList:GetChildren() do
        if not v:IsA("UIListLayout") then
            v:Destroy()
        end
    end
    codebox:setRaw("")
    selected = nil
    TextLabel.Text = "Logs cleared!"
end)

newButton("Exclude (i)", function() return "Click to exclude this Remote.\nExcluding a remote makes SimpleSpy ignore it, but it will continue to be usable." end, function()
    if selected then
        blacklist[OldDebugId(selected.Remote)] = true
        TextLabel.Text = "Excluded!"
    end
end)

newButton("Exclude (n)", function() return "Click to exclude all remotes with this name.\nExcluding a remote makes SimpleSpy ignore it, but it will continue to be usable." end, function()
    if selected then
        blacklist[selected.Name] = true
        TextLabel.Text = "Excluded!"
    end
end)

newButton("Clr Blacklist", function() return "Click to clear the blacklist.\nExcluding a remote makes SimpleSpy ignore it, but it will continue to be usable." end, function()
    blacklist = {}
    TextLabel.Text = "Blacklist cleared!"
end)

newButton("Block (i)", function() return "Click to stop this remote from firing.\nBlocking a remote won't remove it from SimpleSpy logs, but it will not continue to fire the server." end, function()
    if selected then
        blocklist[OldDebugId(selected.Remote)] = true
        TextLabel.Text = "Blocked!"
    end
end)

newButton("Block (n)", function() return "Click to stop remotes with this name from firing.\nBlocking a remote won't remove it from SimpleSpy logs, but it will not continue to fire the server." end, function()
    if selected then
        blocklist[selected.Name] = true
        TextLabel.Text = "Blocked!"
    end
end)

newButton("Clr Blocklist", function() return "Click to stop blocking remotes.\nBlocking a remote won't remove it from SimpleSpy logs, but it will not continue to fire the server." end, function()
    blocklist = {}
    TextLabel.Text = "Blocklist cleared!"
end)

newButton("Decompile", function() return "Decompile source script" end, function()
    if decompile then
        if selected and selected.Source then
            local Source = selected.Source
            if not DecompiledScripts[Source] then
                codebox:setRaw("--[[Decompiling]]")

                xpcall(function()
                    local decompiledsource = decompile(Source):gsub("-- Decompiled with the Synapse X Luau decompiler.","")
                    local Sourcev2s = v2s(Source)
                    if (decompiledsource):find("script") and Sourcev2s then
                        DecompiledScripts[Source] = ("local script = %s\n%s"):format(Sourcev2s,decompiledsource)
                    end
                end,function(err)
                    return codebox:setRaw(("--[[\nAn error has occured\n%s\n]]"):format(err))
                end)
            end
            codebox:setRaw(DecompiledScripts[Source] or "--No Source Found")
            TextLabel.Text = "Done!"
        else
            TextLabel.Text = "Source not found!"
        end
    else
        TextLabel.Text = "Missing function (decompile)"
    end
end)

newButton("Disable Info", function() return string.format("[%s] Toggle function info (because it can cause lag in some games)", configs.funcEnabled and "ENABLED" or "DISABLED") end, function()
    configs.funcEnabled = not configs.funcEnabled
    TextLabel.Text = string.format("[%s] Toggle function info (because it can cause lag in some games)", configs.funcEnabled and "ENABLED" or "DISABLED")
end)

newButton("Autoblock", function() return string.format("[%s] [BETA] Intelligently detects and excludes spammy remote calls from logs", configs.autoblock and "ENABLED" or "DISABLED") end, function()
    configs.autoblock = not configs.autoblock
    TextLabel.Text = string.format("[%s] [BETA] Intelligently detects and excludes spammy remote calls from logs", configs.autoblock and "ENABLED" or "DISABLED")
    history = {}
    excluding = {}
end)

newButton("Logcheckcaller", function() return ("[%s] Log remotes fired by the client"):format(configs.logcheckcaller and "ENABLED" or "DISABLED") end, function()
    configs.logcheckcaller = not configs.logcheckcaller
    TextLabel.Text = ("[%s] Log remotes fired by the client"):format(configs.logcheckcaller and "ENABLED" or "DISABLED")
end)

newButton("Advanced Info", function() return ("[%s] Display more remoteinfo"):format(configs.advancedinfo and "ENABLED" or "DISABLED") end, function()
    configs.advancedinfo = not configs.advancedinfo
    TextLabel.Text = ("[%s] Display more remoteinfo"):format(configs.advancedinfo and "ENABLED" or "DISABLED")
end)

newButton("Join Discord", function() return "Joins The Simple Spy Discord" end, function()
    setclipboard("https://discord.com/invite/AWS6ez9")
    TextLabel.Text = "Copied invite to your clipboard"
    if request then
        request({Url = 'http://127.0.0.1:6463/rpc?v=1',Method = 'POST',Headers = {['Content-Type'] = 'application/json', Origin = 'https://discord.com'},Body = http:JSONEncode({cmd = 'INVITE_BROWSER',nonce = http:GenerateGUID(false),args = {code = 'AWS6ez9'}})})
    end
end)

if configs.supersecretdevtoggle then
    newButton("Load SSV2.2", function() return "Load's Simple Spy V2.2" end, function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/exxtremestuffs/SimpleSpySource/master/SimpleSpy.lua"))()
    end)
    newButton("Load SSV3", function() return "Load's Simple Spy V3" end, function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/78n/SimpleSpy/main/SimpleSpySource.lua"))()
    end)
end
