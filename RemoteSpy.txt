-- Remote Spy —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º, —á–µ—Ä–Ω—ã–º–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏, –æ—Ç–¥–µ–ª—å–Ω–æ–π –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª—å—é, –±–µ–∑ –º—É–ª—å—Ç—è—à–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
-- –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: –≤—Å—Ç–∞–≤—å—Ç–µ –≤ LocalScript –≤ ReplicatedFirst –∏–ª–∏ StarterPlayerScripts

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∏
local Settings = {
    Enabled = true,
    CopyToClipboard = true,
    LogToFile = false,
    Blacklist = { ["CharacterSoundEvent"] = true },
    ShowReturns = true,
    ShowScript = true,
    Theme = "Dark",
}

-- –¢–µ–º—ã (—á–µ—Ä–Ω—ã–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ)
local Themes = {
    Dark = {
        FrameBg = Color3.fromRGB(20, 20, 20), -- –ß–µ—Ä–Ω—ã–π —Ñ–æ–Ω
        TabBg = Color3.fromRGB(30, 30, 30), -- –ß—É—Ç—å —Å–≤–µ—Ç–ª–µ–µ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        ButtonBg = Color3.fromRGB(40, 40, 40), -- –î–ª—è –∫–Ω–æ–ø–æ–∫
        TitleBg = Color3.fromRGB(25, 25, 25), -- –î–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        TextColor = Color3.fromRGB(220, 220, 220), -- –°–≤–µ—Ç–ª—ã–π —Ç–µ–∫—Å—Ç
    },
    Light = {
        FrameBg = Color3.fromRGB(50, 50, 50), -- –°–µ—Ä—ã–π –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
        TabBg = Color3.fromRGB(60, 60, 60),
        ButtonBg = Color3.fromRGB(70, 70, 70),
        TitleBg = Color3.fromRGB(55, 55, 55),
        TextColor = Color3.fromRGB(200, 200, 200),
    }
}

-- –°–æ—Å—Ç–æ—è–Ω–∏–µ
local IgnoredRemotes = Settings.Blacklist
local RemoteList = {}
local Logs = {}
local SelectedRemote = nil
local FilteredRemote = nil
local SearchQuery = ""
local IsMinimized = false

-- –°–æ–∑–¥–∞–µ–º UI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "RemoteSpyGui"
ScreenGui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")
ScreenGui.ResetOnSpawn = false
ScreenGui.IgnoreGuiInset = true

-- –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ (—á–µ—Ä–Ω–æ–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ)
local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0.5, 0, 0.7, 0)
Frame.Position = UDim2.new(0.25, 0, 0.15, 0)
Frame.BackgroundColor3 = Themes[Settings.Theme].FrameBg
Frame.BackgroundTransparency = 0.5
Frame.BorderSizePixel = 0
Frame.ClipsDescendants = true
Frame.Parent = ScreenGui
Frame.Active = true

local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 8)
UICorner.Parent = Frame

-- –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
local dragging, dragInput, dragStart, startPos
local function updateDrag(input)
    if dragging and dragInput then
        local delta = input.Position - dragStart
        local newPos = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        local screenSize = ScreenGui.AbsoluteSize
        newPos = UDim2.new(
            math.clamp(newPos.X.Scale, 0, 1 - Frame.Size.X.Scale),
            math.clamp(newPos.X.Offset, -Frame.AbsoluteSize.X * newPos.X.Scale, screenSize.X - Frame.AbsoluteSize.X * (1 - newPos.X.Scale)),
            math.clamp(newPos.Y.Scale, 0, 1 - Frame.Size.Y.Scale),
            math.clamp(newPos.Y.Offset, -Frame.AbsoluteSize.Y * newPos.Y.Scale, screenSize.Y - Frame.AbsoluteSize.Y * (1 - newPos.Y.Scale))
        )
        Frame.Position = newPos
    end
end

Frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = Frame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

Frame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
        updateDrag(input)
    end
end)

-- –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
local function AnimateFrame(show)
    local target = show and { BackgroundTransparency = 0.5, Size = UDim2.new(0.5, 0, IsMinimized and 0.1 or 0.7, 0), Position = UDim2.new(Frame.Position.X.Scale, Frame.Position.X.Offset, 0.15, 0) } 
        or { BackgroundTransparency = 1, Size = UDim2.new(0.5, 0, 0.1, 0), Position = UDim2.new(Frame.Position.X.Scale, Frame.Position.X.Offset, 0, -50) }
    local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
    TweenService:Create(Frame, tweenInfo, target):Play()
end

-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–±–µ–∑ –æ–±–≤–æ–¥–∫–∏ —Ç–µ–∫—Å—Ç–∞)
local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, 0, 0, 40)
Title.BackgroundColor3 = Themes[Settings.Theme].TitleBg
Title.BackgroundTransparency = 0.5
Title.Text = "Remote Spy"
Title.TextColor3 = Themes[Settings.Theme].TextColor
Title.TextSize = 20
Title.Font = Enum.Font.SourceSansPro
Title.Parent = Frame

local TitleCorner = Instance.new("UICorner")
TitleCorner.CornerRadius = UDim.new(0, 8)
TitleCorner.Parent = Title

-- –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (–∫—Ä—É–≥–ª–∞—è, –±–µ–∑ –º—É–ª—å—Ç—è—à–Ω–æ–π –æ–±–≤–æ–¥–∫–∏)
local CloseButton = Instance.new("TextButton")
CloseButton.Size = UDim2.new(0, 30, 0, 30)
CloseButton.Position = UDim2.new(1, -35, 0, 5)
CloseButton.BackgroundColor3 = Color3.fromRGB(150, 50, 50)
CloseButton.BackgroundTransparency = 0.5
CloseButton.Text = "‚úñ"
CloseButton.TextColor3 = Color3.fromRGB(220, 220, 220)
CloseButton.TextSize = 16
CloseButton.Font = Enum.Font.SourceSansPro
CloseButton.Parent = Frame

local CloseCorner = Instance.new("UICorner")
CloseCorner.CornerRadius = UDim.new(0, 15)
CloseCorner.Parent = CloseButton

-- –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
local SearchButton = Instance.new("TextButton")
SearchButton.Size = UDim2.new(0, 30, 0, 30)
SearchButton.Position = UDim2.new(1, -70, 0, 5)
SearchButton.BackgroundColor3 = Themes[Settings.Theme].ButtonBg
SearchButton.BackgroundTransparency = 0.5
SearchButton.Text = "üîç"
SearchButton.TextColor3 = Themes[Settings.Theme].TextColor
SearchButton.TextSize = 16
SearchButton.Font = Enum.Font.SourceSansPro
SearchButton.Parent = Frame

local SearchButtonCorner = Instance.new("UICorner")
SearchButtonCorner.CornerRadius = UDim.new(0, 15)
SearchButtonCorner.Parent = SearchButton

-- –ö–Ω–æ–ø–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Size = UDim2.new(0, 30, 0, 30)
MinimizeButton.Position = UDim2.new(1, -105, 0, 5)
MinimizeButton.BackgroundColor3 = Themes[Settings.Theme].ButtonBg
MinimizeButton.BackgroundTransparency = 0.5
MinimizeButton.Text = "‚àí"
MinimizeButton.TextColor3 = Themes[Settings.Theme].TextColor
MinimizeButton.TextSize = 16
MinimizeButton.Font = Enum.Font.SourceSansPro
MinimizeButton.Parent = Frame

local MinimizeButtonCorner = Instance.new("UICorner")
MinimizeButtonCorner.CornerRadius = UDim.new(0, 15)
MinimizeButtonCorner.Parent = MinimizeButton

-- –ü–æ–∏—Å–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
local SearchBar = Instance.new("TextBox")
SearchBar.Size = UDim2.new(0.3, -10, 0, 30)
SearchBar.Position = UDim2.new(0, 5, 0, 45)
SearchBar.BackgroundColor3 = Themes[Settings.Theme].TabBg
SearchBar.BackgroundTransparency = 0.5
SearchBar.Text = "Search..."
SearchBar.TextColor3 = Themes[Settings.Theme].TextColor
SearchBar.TextSize = 14
SearchBar.Font = Enum.Font.SourceSansPro
SearchBar.TextXAlignment = Enum.TextXAlignment.Left
SearchBar.ClearTextOnFocus = true
SearchBar.Visible = false
SearchBar.Parent = Frame

local SearchBarCorner = Instance.new("UICorner")
SearchBarCorner.CornerRadius = UDim.new(0, 8)
SearchBarCorner.Parent = SearchBar

-- –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å Remote'–æ–≤ (–ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–¥–µ–ª—å–Ω–∞—è)
local RemoteTabFrame = Instance.new("Frame")
RemoteTabFrame.Size = UDim2.new(0.2, 0, 0.7, 0)
RemoteTabFrame.Position = UDim2.new(0, 10, 0.15, 0)
RemoteTabFrame.BackgroundColor3 = Themes[Settings.Theme].TabBg
RemoteTabFrame.BackgroundTransparency = 0.5
RemoteTabFrame.BorderSizePixel = 0
RemoteTabFrame.Parent = ScreenGui

local RemoteTabCorner = Instance.new("UICorner")
RemoteTabCorner.CornerRadius = UDim.new(0, 8)
RemoteTabCorner.Parent = RemoteTabFrame

local RemoteTabTitle = Instance.new("TextLabel")
RemoteTabTitle.Size = UDim2.new(1, 0, 0, 40)
RemoteTabTitle.BackgroundColor3 = Themes[Settings.Theme].TitleBg
RemoteTabTitle.BackgroundTransparency = 0.5
RemoteTabTitle.Text = "Remotes"
RemoteTabTitle.TextColor3 = Themes[Settings.Theme].TextColor
RemoteTabTitle.TextSize = 16
RemoteTabTitle.Font = Enum.Font.SourceSansPro
RemoteTabTitle.Parent = RemoteTabFrame

local RemoteTabTitleCorner = Instance.new("UICorner")
RemoteTabTitleCorner.CornerRadius = UDim.new(0, 8)
RemoteTabTitleCorner.Parent = RemoteTabTitle

local RemoteTab = Instance.new("ScrollingFrame")
RemoteTab.Size = UDim2.new(1, -10, 1, -80)
RemoteTab.Position = UDim2.new(0, 5, 0, 45)
RemoteTab.BackgroundTransparency = 1
RemoteTab.BorderSizePixel = 0
RemoteTab.ScrollBarThickness = 4
RemoteTab.CanvasSize = UDim2.new(0, 0, 0, 0)
RemoteTab.ScrollingEnabled = true
RemoteTab.Parent = RemoteTabFrame

local RemoteListLayout = Instance.new("UIListLayout")
RemoteListLayout.SortOrder = Enum.SortOrder.Name
RemoteListLayout.Padding = UDim.new(0, 5)
RemoteListLayout.Parent = RemoteTab

-- –ö–Ω–æ–ø–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
local SortButton = Instance.new("TextButton")
SortButton.Size = UDim2.new(1, -10, 0, 30)
SortButton.Position = UDim2.new(0, 5, 1, -35)
SortButton.BackgroundColor3 = Themes[Settings.Theme].ButtonBg
SortButton.BackgroundTransparency = 0.5
SortButton.Text = "Sort: Name"
SortButton.TextColor3 = Themes[Settings.Theme].TextColor
SortButton.TextSize = 14
SortButton.Font = Enum.Font.SourceSansPro
SortButton.Parent = RemoteTabFrame

local SortButtonCorner = Instance.new("UICorner")
SortButtonCorner.CornerRadius = UDim.new(0, 8)
SortButtonCorner.Parent = SortButton

-- –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
local ResultsFrame = Instance.new("Frame")
ResultsFrame.Size = UDim2.new(0.2, 0, 0.7, 0)
ResultsFrame.Position = UDim2.new(0.78, -10, 0.15, 0)
ResultsFrame.BackgroundColor3 = Themes[Settings.Theme].TabBg
ResultsFrame.BackgroundTransparency = 0.5
ResultsFrame.BorderSizePixel = 0
ResultsFrame.Parent = ScreenGui

local ResultsCorner = Instance.new("UICorner")
ResultsCorner.CornerRadius = UDim.new(0, 8)
ResultsCorner.Parent = ResultsFrame

local ResultsTitle = Instance.new("TextLabel")
ResultsTitle.Size = UDim2.new(1, 0, 0, 40)
ResultsTitle.BackgroundColor3 = Themes[Settings.Theme].TitleBg
ResultsTitle.BackgroundTransparency = 0.5
ResultsTitle.Text = "Search Results"
ResultsTitle.TextColor3 = Themes[Settings.Theme].TextColor
ResultsTitle.TextSize = 16
ResultsTitle.Font = Enum.Font.SourceSansPro
ResultsTitle.Parent = ResultsFrame

local ResultsTitleCorner = Instance.new("UICorner")
ResultsTitleCorner.CornerRadius = UDim.new(0, 8)
ResultsTitleCorner.Parent = ResultsTitle

local LogFrame = Instance.new("ScrollingFrame")
LogFrame.Size = UDim2.new(1, -10, 1, -45)
LogFrame.Position = UDim2.new(0, 5, 0, 40)
LogFrame.BackgroundTransparency = 1
LogFrame.BorderSizePixel = 0
LogFrame.ScrollBarThickness = 4
LogFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
LogFrame.Parent = ResultsFrame

local LogLayout = Instance.new("UIListLayout")
LogLayout.SortOrder = Enum.SortOrder.LayoutOrder
LogLayout.Padding = UDim.new(0, 5)
LogLayout.Parent = LogFrame

-- –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ (–æ—Ç–¥–µ–ª—å–Ω–∞—è, –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –≤–Ω–∏–∑)
local ButtonFrame = Instance.new("Frame")
ButtonFrame.Size = UDim2.new(0.5, 0, 0.15, 0)
ButtonFrame.Position = UDim2.new(0.25, 0, 0.87, 10)
ButtonFrame.BackgroundColor3 = Themes[Settings.Theme].TitleBg
ButtonFrame.BackgroundTransparency = 0.5
ButtonFrame.BorderSizePixel = 0
ButtonFrame.Parent = ScreenGui

local ButtonFrameCorner = Instance.new("UICorner")
ButtonFrameCorner.CornerRadius = UDim.new(0, 8)
ButtonFrameCorner.Parent = ButtonFrame

local ButtonScroll = Instance.new("ScrollingFrame")
ButtonScroll.Size = UDim2.new(1, -10, 1, -10)
ButtonScroll.Position = UDim2.new(0, 5, 0, 5)
ButtonScroll.BackgroundTransparency = 1
ButtonScroll.BorderSizePixel = 0
ButtonScroll.ScrollBarThickness = 4
ButtonScroll.CanvasSize = UDim2.new(0, 0, 0, 0)
ButtonScroll.ScrollingDirection = Enum.ScrollingDirection.Y
ButtonScroll.ScrollingEnabled = true
ButtonScroll.Parent = ButtonFrame

local ButtonLayout = Instance.new("UIListLayout")
ButtonLayout.SortOrder = Enum.SortOrder.LayoutOrder
ButtonLayout.Padding = UDim.new(0, 5)
ButtonLayout.Parent = ButtonScroll

-- –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —Ç–µ–º—ã
local ThemeButton = Instance.new("TextButton")
ThemeButton.Size = UDim2.new(0, 30, 0, 30)
ThemeButton.Position = UDim2.new(1, -140, 0, 5)
ThemeButton.BackgroundColor3 = Themes[Settings.Theme].ButtonBg
ThemeButton.BackgroundTransparency = 0.5
ThemeButton.Text = "üåô"
ThemeButton.TextColor3 = Themes[Settings.Theme].TextColor
ThemeButton.TextSize = 16
ThemeButton.Font = Enum.Font.SourceSansPro
ThemeButton.Parent = Frame

local ThemeButtonCorner = Instance.new("UICorner")
ThemeButtonCorner.CornerRadius = UDim.new(0, 15)
ThemeButtonCorner.Parent = ThemeButton

-- –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
local ButtonNames = {"Copy Code", "Copy Remote", "Run Remote", "Info Function", "Ignore Remote", "Unignore Remote", "Save Logs"}
local Buttons = {}

for _, name in ipairs(ButtonNames) do
    local Button = Instance.new("TextButton")
    Button.Size = UDim2.new(1, -10, 0, 30)
    Button.BackgroundColor3 = Themes[Settings.Theme].ButtonBg
    Button.BackgroundTransparency = 0.5
    Button.Text = name
    Button.TextColor3 = Themes[Settings.Theme].TextColor
    Button.TextSize = 14
    Button.Font = Enum.Font.SourceSansPro
    Button.Parent = ButtonScroll

    local ButtonCorner = Instance.new("UICorner")
    ButtonCorner.CornerRadius = UDim.new(0, 8)
    ButtonCorner.Parent = Button

    Buttons[name] = Button
end

ButtonLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    ButtonScroll.CanvasSize = UDim2.new(0, 0, 0, ButtonLayout.AbsoluteContentSize.Y)
end)

-- –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏–π (–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è)
local function AnimateButton(button)
    local originalTransparency = button.BackgroundTransparency
    local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)
    local pressTween = TweenService:Create(button, tweenInfo, {BackgroundTransparency = 0.3})
    local releaseTween = TweenService:Create(button, tweenInfo, {BackgroundTransparency = originalTransparency})

    button.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            pressTween:Play()
        end
    end)

    button.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            releaseTween:Play()
        end
    end)
end

for _, button in pairs(Buttons) do
    AnimateButton(button)
end
AnimateButton(CloseButton)
AnimateButton(SearchButton)
AnimateButton(ThemeButton)
AnimateButton(SortButton)
AnimateButton(MinimizeButton)

-- –°–º–µ–Ω–∞ —Ç–µ–º—ã
local function UpdateTheme()
    Frame.BackgroundColor3 = Themes[Settings.Theme].FrameBg
    Title.BackgroundColor3 = Themes[Settings.Theme].TitleBg
    RemoteTabFrame.BackgroundColor3 = Themes[Settings.Theme].TabBg
    ResultsFrame.BackgroundColor3 = Themes[Settings.Theme].TabBg
    ButtonFrame.BackgroundColor3 = Themes[Settings.Theme].TitleBg
    SearchBar.BackgroundColor3 = Themes[Settings.Theme].TabBg
    SortButton.BackgroundColor3 = Themes[Settings.Theme].ButtonBg
    ThemeButton.BackgroundColor3 = Themes[Settings.Theme].ButtonBg
    MinimizeButton.BackgroundColor3 = Themes[Settings.Theme].ButtonBg
    SearchButton.BackgroundColor3 = Themes[Settings.Theme].ButtonBg

    Title.TextColor3 = Themes[Settings.Theme].TextColor
    RemoteTabTitle.TextColor3 = Themes[Settings.Theme].TextColor
    ResultsTitle.TextColor3 = Themes[Settings.Theme].TextColor
    SearchBar.TextColor3 = Themes[Settings.Theme].TextColor
    SortButton.TextColor3 = Themes[Settings.Theme].TextColor
    ThemeButton.TextColor3 = Themes[Settings.Theme].TextColor
    MinimizeButton.TextColor3 = Themes[Settings.Theme].TextColor
    SearchButton.TextColor3 = Themes[Settings.Theme].TextColor

    for _, button in pairs(Buttons) do
        button.BackgroundColor3 = Themes[Settings.Theme].ButtonBg
        button.TextColor3 = Themes[Settings.Theme].TextColor
    end

    for _, entry in pairs(RemoteTab:GetChildren()) do
        if entry:IsA("TextButton") then
            local remoteName = entry.Text:match("^(.-)%s%(")
            entry.BackgroundColor3 = IgnoredRemotes[remoteName] and Themes[Settings.Theme].ButtonBg:Lerp(Color3.fromRGB(80, 80, 80), 0.5) or (FilteredRemote and entry.Text:match("^(.-)%s%(") == FilteredRemote.Name and Themes[Settings.Theme].ButtonBg:Lerp(Color3.fromRGB(100, 100, 150), 0.5) or Themes[Settings.Theme].ButtonBg)
            entry.TextColor3 = Themes[Settings.Theme].TextColor
        end
    end

    for _, entry in pairs(LogFrame:GetChildren()) do
        if entry:IsA("TextButton") then
            entry.BackgroundColor3 = Themes[Settings.Theme].ButtonBg
            entry.TextColor3 = Themes[Settings.Theme].TextColor
        end
    end
end

ThemeButton.MouseButton1Click:Connect(function()
    Settings.Theme = Settings.Theme == "Dark" and "Light" or "Dark"
    ThemeButton.Text = Settings.Theme == "Dark" and "üåô" or "‚òÄ"
    UpdateTheme()
end)

-- –ó–∞–∫—Ä—ã—Ç–∏–µ UI
CloseButton.MouseButton1Click:Connect(function()
    AnimateFrame(false)
    wait(0.3)
    ScreenGui.Enabled = false
end)

-- –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ UI
MinimizeButton.MouseButton1Click:Connect(function()
    IsMinimized = not IsMinimized
    MinimizeButton.Text = IsMinimized and "+" or "‚àí"
    RemoteTabFrame.Visible = not IsMinimized
    ResultsFrame.Visible = not IsMinimized
    ButtonFrame.Visible = not IsMinimized
    SearchBar.Visible = not IsMinimized and SearchBar.Visible
    AnimateFrame(true)
end)

-- –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ø–æ–∏—Å–∫–∞
SearchButton.MouseButton1Click:Connect(function()
    SearchBar.Visible = not SearchBar.Visible
end)

-- –ü–æ–∏—Å–∫
SearchBar:GetPropertyChangedSignal("Text"):Connect(function()
    SearchQuery = SearchBar.Text:lower()
    UpdateRemoteTab()
    UpdateLogFrame()
end)

-- –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
local sortMode = "Name"
SortButton.MouseButton1Click:Connect(function()
    sortMode = sortMode == "Name" and "Type" or "Name"
    SortButton.Text = "Sort: " .. sortMode
    RemoteListLayout.SortOrder = sortMode == "Name" and Enum.SortOrder.Name or Enum.SortOrder.LayoutOrder
    UpdateRemoteTab()
end)

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
local function ValueToString(value)
    local Type = typeof(value)
    if Type == "Instance" then
        return value:GetFullName()
    elseif Type == "table" then
        return HttpService:JSONEncode(value)
    else
        return tostring(value)
    end
end

-- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ Remote'–æ–≤
local function UpdateRemoteTab()
    for _, child in pairs(RemoteTab:GetChildren()) do
        if child:IsA("TextButton") then
            child:Destroy()
        end
    end

    local sortedRemotes = {}
    for remote, _ in pairs(RemoteList) do
        table.insert(sortedRemotes, { Remote = remote, Name = remote.Name, Type = remote.ClassName })
    end

    if sortMode == "Type" then
        table.sort(sortedRemotes, function(a, b) return a.Type < b.Type or (a.Type == b.Type and a.Name < b.Name) end)
    else
        table.sort(sortedRemotes, function(a, b) return a.Name < b.Name end)
    end

    for _, data in ipairs(sortedRemotes) do
        local Remote = data.Remote
        if SearchQuery == "" or Remote.Name:lower():find(SearchQuery) then
            local RemoteEntry = Instance.new("TextButton")
            RemoteEntry.Size = UDim2.new(1, -10, 0, 30)
            RemoteEntry.BackgroundColor3 = IgnoredRemotes[Remote.Name] and Themes[Settings.Theme].ButtonBg:Lerp(Color3.fromRGB(80, 80, 80), 0.5) or (FilteredRemote == Remote and Themes[Settings.Theme].ButtonBg:Lerp(Color3.fromRGB(100, 100, 150), 0.5) or Themes[Settings.Theme].ButtonBg)
            RemoteEntry.BackgroundTransparency = 0.5
            RemoteEntry.Text = Remote.Name .. " (" .. Remote.ClassName .. ")"
            RemoteEntry.TextColor3 = Themes[Settings.Theme].TextColor
            RemoteEntry.TextSize = 14
            RemoteEntry.Font = Enum.Font.SourceSansPro
            RemoteEntry.TextXAlignment = Enum.TextXAlignment.Left
            RemoteEntry.Parent = RemoteTab

            local RemoteEntryCorner = Instance.new("UICorner")
            RemoteEntryCorner.CornerRadius = UDim.new(0, 8)
            RemoteEntryCorner.Parent = RemoteEntry

            RemoteEntry.MouseButton1Click:Connect(function()
                FilteredRemote = FilteredRemote == Remote and nil or Remote
                UpdateLogFrame()
                UpdateRemoteTab()
            end)
        end
    end

    RemoteTab.CanvasSize = UDim2.new(0, 0, 0, RemoteListLayout.AbsoluteContentSize.Y)
end

-- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞)
local function UpdateLogFrame()
    for _, child in pairs(LogFrame:GetChildren()) do
        if child:IsA("TextButton") then
            child:Destroy()
        end
    end

    for _, log in ipairs(Logs) do
        if (not FilteredRemote or log.Remote == FilteredRemote) and (SearchQuery == "" or log.Text:lower():find(SearchQuery)) then
            local LogEntry = Instance.new("TextButton")
            LogEntry.Size = UDim2.new(1, -10, 0, 30)
            LogEntry.BackgroundColor3 = Themes[Settings.Theme].ButtonBg
            LogEntry.BackgroundTransparency = 0.5
            LogEntry.Text = log.Text
            LogEntry.TextColor3 = Themes[Settings.Theme].TextColor
            LogEntry.TextSize = 14
            LogEntry.Font = Enum.Font.SourceSansPro
            LogEntry.TextXAlignment = Enum.TextXAlignment.Left
            LogEntry.Parent = LogFrame

            local LogEntryCorner = Instance.new("UICorner")
            LogEntryCorner.CornerRadius = UDim.new(0, 8)
            LogEntryCorner.Parent = LogEntry

            LogEntry:SetAttribute("Remote", log.Remote)
            LogEntry:SetAttribute("Method", log.Method)
            LogEntry:SetAttribute("Arguments", log.Arguments)

            LogEntry.MouseButton1Click:Connect(function()
                if Settings.CopyToClipboard then
                    setclipboard(log.Text)
                end
                SelectedRemote = { Remote = log.Remote, Method = log.Method, Arguments = log.Arguments }
            end)
        end
    end

    LogFrame.CanvasSize = UDim2.new(0, 0, 0, LogLayout.AbsoluteContentSize.Y)
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
local function LogRemote(Remote, Method, Arguments, ReturnValue)
    if not Settings.Enabled or IgnoredRemotes[Remote.Name] then return end
    local logText = string.format("[%s] %s:%s(%s)", os.date("%H:%M:%S"), Remote:GetFullName(), Method, table.concat(table.map(Arguments, ValueToString), ", "))
    if Settings.ShowReturns and ReturnValue then
        logText = logText .. " -> " .. ValueToString(ReturnValue)
    end

    table.insert(Logs, { Remote = Remote, Method = Method, Arguments = Arguments, Text = logText })
    if #Logs > 1000 then
        table.remove(Logs, 1)
    end

    if (not FilteredRemote or Remote == FilteredRemote) and (SearchQuery == "" or logText:lower():find(SearchQuery)) then
        UpdateLogFrame()
    end
end

-- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
Buttons["Copy Code"].MouseButton1Click:Connect(function()
    if SelectedRemote then
        local code = string.format("%s:%s(%s)", SelectedRemote.Remote:GetFullName(), SelectedRemote.Method, table.concat(table.map(SelectedRemote.Arguments, ValueToString), ", "))
        setclipboard(code)
    end
end)

Buttons["Copy Remote"].MouseButton1Click:Connect(function()
    if SelectedRemote then
        setclipboard(SelectedRemote.Remote:GetFullName())
    end
end)

Buttons["Run Remote"].MouseButton1Click:Connect(function()
    if SelectedRemote then
        if SelectedRemote.Method == "FireServer" then
            SelectedRemote.Remote:FireServer(unpack(SelectedRemote.Arguments))
        elseif SelectedRemote.Method == "InvokeServer" then
            SelectedRemote.Remote:InvokeServer(unpack(SelectedRemote.Arguments))
        end
    end
end)

Buttons["Info Function"].MouseButton1Click:Connect(function()
    if SelectedRemote then
        local info = string.format("Remote: %s\nType: %s\nMethod: %s\nArguments: %s", 
            SelectedRemote.Remote:GetFullName(), 
            SelectedRemote.Remote.ClassName, 
            SelectedRemote.Method, 
            HttpService:JSONEncode(SelectedRemote.Arguments))
        LogRemote(nil, "Info", {info}, nil)
    end
end)

Buttons["Ignore Remote"].MouseButton1Click:Connect(function()
    if SelectedRemote then
        IgnoredRemotes[SelectedRemote.Remote.Name] = true
        UpdateRemoteTab()
    end
end)

Buttons["Unignore Remote"].MouseButton1Click:Connect(function()
    if SelectedRemote then
        IgnoredRemotes[SelectedRemote.Remote.Name] = nil
        UpdateRemoteTab()
    end
end)

Buttons["Save Logs"].MouseButton1Click:Connect(function()
    if Settings.LogToFile and writefile then
        local logData = {}
        for _, log in ipairs(Logs) do
            table.insert(logData, { Time = log.Text:match("^%[(.-)%]"), Remote = log.Remote and log.Remote:GetFullName(), Method = log.Method, Arguments = log.Arguments })
        end
        writefile("RemoteSpyLogs.json", HttpService:JSONEncode(logData))
        LogRemote(nil, "Info", {"Logs saved to RemoteSpyLogs.json"}, nil)
    else
        LogRemote(nil, "Info", {"Log saving not supported or disabled"}, nil)
    end
end)

-- –•—É–∫ –¥–ª—è RemoteEvent
local function HookRemoteEvent(Remote)
    local OriginalFireServer = Remote.FireServer
    Remote.FireServer = function(self, ...)
        local args = {...}
        if Settings.Enabled and not IgnoredRemotes[Remote.Name] then
            LogRemote(Remote, "FireServer", args, nil)
        end
        return OriginalFireServer(self, ...)
    end
end

-- –•—É–∫ –¥–ª—è RemoteFunction
local function HookRemoteFunction(Remote)
    local OriginalInvokeServer = Remote.InvokeServer
    Remote.InvokeServer = function(self, ...)
        local args = {...}
        if Settings.Enabled and not IgnoredRemotes[Remote.Name] then
            local returnValue = OriginalInvokeServer(self, ...)
            LogRemote(Remote, "InvokeServer", args, returnValue)
            return returnValue
        end
        return OriginalInvokeServer(self, ...)
    end
end

-- –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Remote'–æ–≤
local function ScanRemotes(container)
    for _, obj in pairs(container:GetDescendants()) do
        if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
            if obj:IsA("RemoteEvent") then
                HookRemoteEvent(obj)
            else
                HookRemoteFunction(obj)
            end
            RemoteList[obj] = true
            UpdateRemoteTab()
        end
    end
    container.DescendantAdded:Connect(function(obj)
        if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
            if obj:IsA("RemoteEvent") then
                HookRemoteEvent(obj)
            else
                HookRemoteFunction(obj)
            end
            RemoteList[obj] = true
            UpdateRemoteTab()
        end
    end)
end

-- –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
ScanRemotes(game:GetService("ReplicatedStorage"))
ScanRemotes(game:GetService("Workspace"))

-- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.F9 then
        ScreenGui.Enabled = true
        AnimateFrame(true)
    end
end)

-- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
local lastTapTime = 0
UserInputService.TouchTap:Connect(function(touchPositions, gameProcessed)
    if not gameProcessed and #touchPositions == 1 then
        local currentTime = tick()
        if currentTime - lastTapTime < 0.3 then
            ScreenGui.Enabled = true
            AnimateFrame(true)
        end
        lastTapTime = currentTime
    end
end)

-- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
UpdateTheme()