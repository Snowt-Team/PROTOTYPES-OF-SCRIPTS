-- WindUI
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

-- Locals
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local CurrentCamera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local CoreGui = game:GetService("CoreGui")

function gradient(text, startColor, endColor)
    local result = ""
    local length = #text

    for i = 1, length do
        local t = (i - 1) / math.max(length - 1, 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)

        local char = text:sub(i, i)
        result = result .. "<font color=\"rgb(" .. r ..", " .. g .. ", " .. b .. ")\">" .. char .. "</font>"
    end

    return result
end

local Confirmed = false

WindUI:Popup({
    Title = gradient("SNT HUB", Color3.fromHex("#eb1010"), Color3.fromHex("#1023eb")),
    Icon = "info",
    Content = gradient("This script made by", Color3.fromHex("#10eb3c"), Color3.fromHex("#67c97a")) .. gradient(" SnowT", Color3.fromHex("#001e80"), Color3.fromHex("#16f2d9")),
    Buttons = {
        {
            Title = gradient("Cancel", Color3.fromHex("#e80909"), Color3.fromHex("#630404")),
            Callback = function() end,
            Variant = "Tertiary", -- Primary, Secondary, Tertiary
        },
        {
            Title = gradient("Load", Color3.fromHex("#90f09e"), Color3.fromHex("#13ed34")),
            Callback = function() Confirmed = true end,
            Variant = "Secondary", -- Primary, Secondary, Tertiary
        }
    }
})

repeat task.wait() until Confirmed

WindUI:Notify({
    Title = gradient("SNT HUB", Color3.fromHex("#eb1010"), Color3.fromHex("#1023eb")),
    Content = "Скрипт успешно загружен!",
    Icon = "check-circle",
    Duration = 3,
})

-- Window
local Window = WindUI:CreateWindow({
    Title = gradient("SNT&MirrozzScript [Beta]", Color3.fromHex("#001e80"), Color3.fromHex("#16f2d9")),
    Icon = "infinity",
    Author = gradient("Murder Mystery 2", Color3.fromHex("#1bf2b2"), Color3.fromHex("#1bcbf2")),
    Folder = "WindUI",
    Size = UDim2.fromOffset(300, 270),
    Transparent = true,
    Theme = "Dark",
    SideBarWidth = 200,
    UserEnabled = true,
    HasOutline = true,
})

-- Open Button
Window:EditOpenButton({
    Title = "Open UI",
    Icon = "monitor",
    CornerRadius = UDim.new(2, 6),
    StrokeThickness = 2,
    Color = ColorSequence.new(
        Color3.fromHex("1E213D"),
        Color3.fromHex("1F75FE")
    ),
    Draggable = true,
})

-- Tabs
local Tabs = {
    MainTab = Window:Tab({ Title = gradient("MAIN", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "terminal" }),
    CharacterTab = Window:Tab({ Title = gradient("CHARACTER", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "file-cog" }),
    TeleportTab = Window:Tab({ Title = gradient("TELEPORT", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "user" }),
    EspTab = Window:Tab({ Title = gradient("ESP", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "eye" }),
    AimbotTab = Window:Tab({ Title = gradient("AIMBOT", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "arrow-right" }),
    AutoFarm = Window:Tab({ Title = gradient("AUTOFARM", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "user"}),
    bs = Window:Divider(),
    InnocentTab = Window:Tab({ Title = gradient("INNOCENT", Color3.fromHex("#0ff707"), Color3.fromHex("#1e690c")), Icon = "circle" 
}),
    MurderTab = Window:Tab({ Title = gradient("MURDER", Color3.fromHex("#e80909"), Color3.fromHex("#630404")), Icon = "circle"
}),
    SheriffTab = Window:Tab({
        Title = gradient("SHERIFF", Color3.fromHex("#001e80"), Color3.fromHex("#16f2d9")), Icon = "circle" 
    }),
    gh = Window:Divider(),
    ServerTab = Window:Tab({ Title = gradient("SERVER", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "atom", }),
    SettingsTab = Window:Tab({ Title = gradient("SETTINGS", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "code" }),
    ChangelogsTab = Window:Tab({ Title = gradient("CHANGELOGS", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "info"}),
    SocialsTab = Window:Tab({ Title = gradient("SOCIALS", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "star"}),
    b = Window:Divider(),
    WindowTab = Window:Tab({ Title = gradient("CONFIGURATION", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "settings", Desc = "Manage window settings and file configurations." }),
    CreateThemeTab = Window:Tab({ Title = gradient("THEMES", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "palette", Desc = "Design and apply custom themes." }),
}

-- WindUI MM2 ESP System (Optimized)
-- Version: 2.0
-- Author: SnowT

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local CoreGui = game:GetService("CoreGui")

-- Local references
local LocalPlayer = Players.LocalPlayer
local CurrentCamera = Workspace.CurrentCamera

-- ESP Configuration
local ESPConfig = {
    -- Murderer
    HighlightMurderer = false,
    NameEspMurderer = false,
    DistanceEspMurderer = false,
    
    -- Sheriff
    HighlightSheriff = false,
    NameEspSheriff = false,
    DistanceEspSheriff = false,
    
    -- Innocent
    HighlightInnocent = false,
    NameEspInnocent = false,
    DistanceEspInnocent = false,
    
    -- GunDrop
    HighlightGunDrop = false,
    NameEspGunDrop = false,
    DistanceEspGunDrop = false,
    
    -- General
    EspTextSize = 18,
    HighlightTransparency = 0.5,
    UpdateInterval = 0.5
}

-- Role Manager
local RoleManager = {
    Murderer = nil,
    Sheriff = nil,
    Hero = nil,
    Innocents = {},
    GunDrop = nil,
    
    UpdateRoles = function(self)
        -- Clear previous data
        self.Murderer = nil
        self.Sheriff = nil
        self.Hero = nil
        self.Innocents = {}
        
        -- Try to get roles from game API first
        local success, result = pcall(function()
            local getPlayerData = ReplicatedStorage:FindFirstChild("GetPlayerData", true)
            return getPlayerData and getPlayerData:IsA("RemoteFunction") and getPlayerData:InvokeServer()
        end)
        
        if success and result then
            -- Process official role data
            for name, data in pairs(result) do
                local player = Players:FindFirstChild(name)
                if player then
                    if data.Role == "Murderer" then
                        self.Murderer = player
                    elseif data.Role == "Sheriff" then
                        self.Sheriff = player
                    elseif data.Role == "Hero" then
                        self.Hero = player
                    else
                        table.insert(self.Innocents, player)
                    end
                end
            end
        else
            -- Fallback method: detect roles by tools
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and self:IsAlive(player) then
                    local tool = player.Character:FindFirstChildOfClass("Tool")
                    if tool then
                        local toolName = tool.Name:lower()
                        if toolName:match("knife") or toolName:match("blade") then
                            self.Murderer = player
                        elseif toolName:match("gun") or toolName:match("revolver") or toolName:match("pistol") then
                            self.Sheriff = player
                        end
                    end
                end
            end
        end
    end,
    
    IsAlive = function(self, player)
        if not player or not player.Character then return false end
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        return humanoid and humanoid.Health > 0
    end,
    
    FindGunDrop = function(self)
        local function searchForGunDrop(parent)
            for _, obj in pairs(parent:GetDescendants()) do
                if obj.Name:lower() == "gundrop" and obj:IsA("BasePart") then
                    return obj
                end
            end
            return nil
        end

        -- Check workspace and maps
        local gunDrop = searchForGunDrop(Workspace)
        if gunDrop then return gunDrop end

        for _, map in pairs(Workspace:GetChildren()) do
            if map:IsA("Model") then
                gunDrop = searchForGunDrop(map)
                if gunDrop then return gunDrop end
            end
        end

        return nil
    end
}

-- Tag Manager
local TagManager = {
    NameTags = {},
    DistanceTags = {},
    Highlights = {},
    
    CreateTag = function(self, target, config)
        if not target then return nil end
        
        local tagType = config.Type -- "Name" or "Distance"
        local storage = self[tagType.."Tags"]
        
        -- Clean up old tag if exists
        if storage[target] then
            storage[target]:Destroy()
            storage[target] = nil
        end
        
        -- Determine adornee (player head or gun drop part)
        local adornee
        if target:IsA("Player") then
            adornee = target.Character and target.Character:FindFirstChild("Head")
        else
            adornee = target
        end
        
        if not adornee then return nil end
        
        -- Create new tag
        local tag = Instance.new("BillboardGui")
        tag.Name = tagType.."Tag"
        tag.Adornee = adornee
        tag.Size = UDim2.new(0, 100, 0, 50)
        tag.StudsOffset = Vector3.new(0, tagType == "Name" and 2 or 1, 0)
        tag.AlwaysOnTop = true
        tag.MaxDistance = 100
        tag.Enabled = true
        
        local textLabel = Instance.new("TextLabel")
        textLabel.Size = UDim2.new(1, 0, 1, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.Text = config.Text or (tagType == "Name" and target.Name or "0 studs")
        textLabel.TextColor3 = config.Color or Color3.new(1, 1, 1)
        textLabel.TextSize = ESPConfig.EspTextSize
        textLabel.Font = Enum.Font.SourceSansBold
        textLabel.TextStrokeTransparency = 0.5
        textLabel.Parent = tag
        
        tag.Parent = CoreGui
        storage[target] = tag
        
        return tag
    end,
    
    CreateHighlight = function(self, target, color)
        if not target then return nil end
        
        -- Clean up old highlight if exists
        if self.Highlights[target] then
            self.Highlights[target]:Destroy()
            self.Highlights[target] = nil
        end
        
        -- Determine target model (player character or gun drop)
        local targetModel
        if target:IsA("Player") then
            targetModel = target.Character
        else
            targetModel = target
        end
        
        if not targetModel then return nil end
        
        -- Create new highlight
        local highlight = Instance.new("Highlight")
        highlight.Name = "Highlight"
        highlight.Adornee = targetModel
        highlight.FillColor = color
        highlight.FillTransparency = ESPConfig.HighlightTransparency
        highlight.OutlineColor = color
        highlight.OutlineTransparency = 0
        highlight.Parent = targetModel
        
        self.Highlights[target] = highlight
        return highlight
    end,
    
    UpdateDistance = function(self, target)
        if not self.DistanceTags[target] then return end
        if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
        
        local targetPos
        if target:IsA("Player") then
            local root = target.Character and target.Character:FindFirstChild("HumanoidRootPart")
            if not root then return end
            targetPos = root.Position
        else
            targetPos = target.Position
        end
        
        local distance = (targetPos - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
        self.DistanceTags[target].TextLabel.Text = string.format("%.1f studs", distance)
    end,
    
    Clear = function(self, target)
        if not target then return end
        
        -- Clear name tag
        if self.NameTags[target] then
            self.NameTags[target]:Destroy()
            self.NameTags[target] = nil
        end
        
        -- Clear distance tag
        if self.DistanceTags[target] then
            self.DistanceTags[target]:Destroy()
            self.DistanceTags[target] = nil
        end
        
        -- Clear highlight
        if self.Highlights[target] then
            self.Highlights[target]:Destroy()
            self.Highlights[target] = nil
        end
    end,
    
    ClearAll = function(self)
        for target, _ in pairs(self.NameTags) do
            self:Clear(target)
        end
        
        for target, _ in pairs(self.DistanceTags) do
            self:Clear(target)
        end
        
        for target, _ in pairs(self.Highlights) do
            self:Clear(target)
        end
    end
}

-- ESP Controller
local ESPController = {
    Active = false,
    LastUpdate = 0,
    
    Start = function(self)
        if self.Active then return end
        self.Active = true
        
        -- Setup event listeners
        self:SetupEventListeners()
        
        -- Start update loop
        self.UpdateConnection = RunService.Heartbeat:Connect(function()
            self:OnUpdate()
        end)
    end,
    
    Stop = function(self)
        if not self.Active then return end
        self.Active = false
        
        -- Disconnect events
        if self.UpdateConnection then
            self.UpdateConnection:Disconnect()
            self.UpdateConnection = nil
        end
        
        if self.PlayerRemovingConnection then
            self.PlayerRemovingConnection:Disconnect()
            self.PlayerRemovingConnection = nil
        end
        
        if self.CharacterAddedConnection then
            self.CharacterAddedConnection:Disconnect()
            self.CharacterAddedConnection = nil
        end
        
        -- Clear all ESP elements
        TagManager:ClearAll()
    end,
    
    SetupEventListeners = function(self)
        -- Clean up when player leaves
        self.PlayerRemovingConnection = Players.PlayerRemoving:Connect(function(player)
            TagManager:Clear(player)
            if player == LocalPlayer then
                self:Stop()
            end
        end)
        
        -- Clean up when local player respawns
        self.CharacterAddedConnection = LocalPlayer.CharacterAdded:Connect(function()
            for _, player in pairs(Players:GetPlayers()) do
                TagManager:Clear(player)
            end
            TagManager:Clear(RoleManager.GunDrop)
        end)
    end,
    
    OnUpdate = function(self)
        local currentTime = tick()
        if currentTime - self.LastUpdate >= ESPConfig.UpdateInterval then
            self:UpdateESP()
            self.LastUpdate = currentTime
        end
    end,
    
    UpdateESP = function(self)
        -- Update role information
        RoleManager:UpdateRoles()
        
        -- Update GunDrop
        RoleManager.GunDrop = RoleManager:FindGunDrop()
        
        -- Process all players
        for _, player in pairs(Players:GetPlayers()) do
            if player == LocalPlayer then continue end
            
            if RoleManager:IsAlive(player) then
                self:ProcessPlayerESP(player)
            else
                TagManager:Clear(player)
            end
        end
        
        -- Process GunDrop
        self:ProcessGunDropESP()
    end,
    
    ProcessPlayerESP = function(self, player)
        local role, color = self:DeterminePlayerRole(player)
        if not role then return end
        
        -- Highlight
        if ESPConfig["Highlight"..role] then
            TagManager:CreateHighlight(player, color)
        else
            TagManager:Clear(player) -- Clear highlight if disabled
        end
        
        -- Name ESP
        if ESPConfig["NameEsp"..role] then
            TagManager:CreateTag(player, {
                Type = "Name",
                Color = color,
                Text = player.Name
            })
        else
            if TagManager.NameTags[player] then
                TagManager.NameTags[player]:Destroy()
                TagManager.NameTags[player] = nil
            end
        end
        
        -- Distance ESP
        if ESPConfig["DistanceEsp"..role] then
            TagManager:CreateTag(player, {
                Type = "Distance",
                Color = color
            })
            TagManager:UpdateDistance(player)
        else
            if TagManager.DistanceTags[player] then
                TagManager.DistanceTags[player]:Destroy()
                TagManager.DistanceTags[player] = nil
            end
        end
    end,
    
    ProcessGunDropESP = function(self)
        local gunDrop = RoleManager.GunDrop
        if not gunDrop then
            TagManager:Clear(gunDrop)
            return
        end
        
        local gunColor = Color3.fromRGB(255, 255, 0)
        
        -- Highlight
        if ESPConfig.HighlightGunDrop then
            TagManager:CreateHighlight(gunDrop, gunColor)
        else
            TagManager:Clear(gunDrop) -- Clear highlight if disabled
        end
        
        -- Name ESP
        if ESPConfig.NameEspGunDrop then
            TagManager:CreateTag(gunDrop, {
                Type = "Name",
                Color = gunColor,
                Text = "GunDrop"
            })
        else
            if TagManager.NameTags[gunDrop] then
                TagManager.NameTags[gunDrop]:Destroy()
                TagManager.NameTags[gunDrop] = nil
            end
        end
        
        -- Distance ESP
        if ESPConfig.DistanceEspGunDrop then
            TagManager:CreateTag(gunDrop, {
                Type = "Distance",
                Color = gunColor
            })
            TagManager:UpdateDistance(gunDrop)
        else
            if TagManager.DistanceTags[gunDrop] then
                TagManager.DistanceTags[gunDrop]:Destroy()
                TagManager.DistanceTags[gunDrop] = nil
            end
        end
    end,
    
    DeterminePlayerRole = function(self, player)
        if player == RoleManager.Murderer then
            return "Murderer", Color3.fromRGB(255, 0, 0)
        elseif player == RoleManager.Sheriff or (player == RoleManager.Hero and (not RoleManager.Sheriff or not RoleManager:IsAlive(RoleManager.Sheriff))) then
            return "Sheriff", Color3.fromRGB(0, 0, 255)
        else
            return "Innocent", Color3.fromRGB(0, 255, 0)
        end
    end
}

-- Initialize ESP
ESPController:Start()

-- UI Controls (unchanged from original)
Tabs.EspTab:Section({Title = gradient("Murder ESP", Color3.fromHex("#e80909"), Color3.fromHex("#630404"))})
Tabs.EspTab:Toggle({
    Title = gradient("Highlight Murder", Color3.fromHex("#e80909"), Color3.fromHex("#630404")),
    Default = false,
    Callback = function(state)
        ESPConfig.HighlightMurderer = state
    end
})
Tabs.EspTab:Toggle({
    Title = gradient("Murder Name ESP", Color3.fromHex("#e80909"), Color3.fromHex("#630404")),
    Default = false,
    Callback = function(state)
        ESPConfig.NameEspMurderer = state
    end
})
Tabs.EspTab:Toggle({
    Title = gradient("Murder Distance ESP", Color3.fromHex("#e80909"), Color3.fromHex("#630404")),
    Default = false,
    Callback = function(state)
        ESPConfig.DistanceEspMurderer = state
    end
})

Tabs.EspTab:Section({Title = gradient("Sheriff ESP", Color3.fromHex("#001e80"), Color3.fromHex("#16f2d9"))})
Tabs.EspTab:Toggle({
    Title = gradient("Highlight Sheriff", Color3.fromHex("#001e80"), Color3.fromHex("#16f2d9")),
    Default = false,
    Callback = function(state)
        ESPConfig.HighlightSheriff = state
    end
})
Tabs.EspTab:Toggle({
    Title = gradient("Sheriff Name ESP", Color3.fromHex("#001e80"), Color3.fromHex("#16f2d9")),
    Default = false,
    Callback = function(state)
        ESPConfig.NameEspSheriff = state
    end
})
Tabs.EspTab:Toggle({
    Title = gradient("Sheriff Distance ESP", Color3.fromHex("#001e80"), Color3.fromHex("#16f2d9")),
    Default = false,
    Callback = function(state)
        ESPConfig.DistanceEspSheriff = state
    end
})

Tabs.EspTab:Section({Title = gradient("Innocent ESP", Color3.fromHex("#0ff707"), Color3.fromHex("#1e690c"))})
Tabs.EspTab:Toggle({
    Title = gradient("Highlight Innocent", Color3.fromHex("#0ff707"), Color3.fromHex("#1e690c")),
    Default = false,
    Callback = function(state)
        ESPConfig.HighlightInnocent = state
    end
})
Tabs.EspTab:Toggle({
    Title = gradient("Innocent Name ESP", Color3.fromHex("#0ff707"), Color3.fromHex("#1e690c")),
    Default = false,
    Callback = function(state)
        ESPConfig.NameEspInnocent = state
    end
})
Tabs.EspTab:Toggle({
    Title = gradient("Innocent Distance ESP", Color3.fromHex("#0ff707"), Color3.fromHex("#1e690c")),
    Default = false,
    Callback = function(state)
        ESPConfig.DistanceEspInnocent = state
    end
})

Tabs.EspTab:Section({Title = gradient("GunDrop ESP", Color3.fromHex("#ffff00"), Color3.fromHex("#ccaa00"))})
Tabs.EspTab:Toggle({
    Title = gradient("Highlight GunDrop", Color3.fromHex("#ffff00"), Color3.fromHex("#ccaa00")),
    Default = false,
    Callback = function(state)
        ESPConfig.HighlightGunDrop = state
    end
})
Tabs.EspTab:Toggle({
    Title = gradient("GunDrop Name ESP", Color3.fromHex("#ffff00"), Color3.fromHex("#ccaa00")),
    Default = false,
    Callback = function(state)
        ESPConfig.NameEspGunDrop = state
    end
})
Tabs.EspTab:Toggle({
    Title = gradient("GunDrop Distance ESP", Color3.fromHex("#ffff00"), Color3.fromHex("#ccaa00")),
    Default = false,
    Callback = function(state)
        ESPConfig.DistanceEspGunDrop = state
    end
})

Tabs.EspTab:Section({Title = gradient("ESP Settings", Color3.fromHex("#ffffff"), Color3.fromHex("#636363"))})

Tabs.EspTab:Slider({
    Title = gradient("Esp text size", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")),
    Value = {Min = 12, Max = 24, Default = 18},
    Callback = function(value)
        ESPConfig.EspTextSize = value
        for _, tag in pairs(TagManager.NameTags) do
            tag.TextLabel.TextSize = value
        end
        for _, tag in pairs(TagManager.DistanceTags) do
            tag.TextLabel.TextSize = value
        end
    end
})

Tabs.EspTab:Slider({
    Title = gradient("Highlight transparency", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")),
    Step = 0.1,
    Value = {Min = 0, Max = 1, Default = 0.5},
    Callback = function(value)
        ESPConfig.HighlightTransparency = value
        for _, highlight in pairs(TagManager.Highlights) do
            highlight.FillTransparency = value
        end
    end
})