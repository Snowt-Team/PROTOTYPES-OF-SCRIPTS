-- GUI Setup with error handling
local frame = script.Parent -- The Frame (menu) the script is inside
if not frame:IsA("Frame") then
    error("Script must be placed inside a Frame object")
end

local screenGui = frame.Parent -- The Frame's parent should be a ScreenGui
if not screenGui:IsA("ScreenGui") then
    error("Frame must be a child of a ScreenGui")
end

-- Configure ScreenGui
screenGui.Enabled = true -- Ensure ScreenGui is active
screenGui.IgnoreGuiInset = true -- Avoid topbar offset (important for mobile)
screenGui.ResetOnSpawn = false -- Persist GUI across respawns
screenGui.DisplayOrder = 10 -- Ensure menu is on top of other UI

-- Configure Frame (75x75 pixels, gray background, blue border, 0.8 transparency)
frame.Size = UDim2.new(0, 75, 0, 75) -- 75x75 pixels
frame.BackgroundColor3 = Color3.fromRGB(128, 128, 128) -- Gray background
frame.BackgroundTransparency = 0.8 -- 0.8 transparency (slightly see-through)
frame.BorderColor3 = Color3.fromRGB(0, 0, 255) -- Blue border
frame.BorderSizePixel = 2 -- Border thickness
frame.Position = UDim2.new(0.5, -37.5, 0.5, -37.5) -- Center the frame
frame.Visible = true -- Ensure frame is visible
frame.Active = true -- Allow interaction for dragging
frame.Name = "SimpleMenuFrame" -- Name for clarity

-- Add UIDragDetector for dragging (supports mouse and touch)
local dragDetector = Instance.new("UIDragDetector")
dragDetector.Parent = frame
dragDetector.DragStyle = Enum.UIDragDetectorDragStyle.TranslatePlane -- Dragging in 2D plane
dragDetector.ResponseStyle = Enum.UIDragDetectorResponseStyle.World -- Smooth dragging

-- Function to keep the menu within screen boundaries
local function clampToScreen(position)
    local screenSize = frame.Parent.AbsoluteSize
    local frameSize = frame.AbsoluteSize
    
    local minX = 0
    local maxX = math.max(0, screenSize.X - frameSize.X) -- Prevent negative maxX
    local minY = 0
    local maxY = math.max(0, screenSize.Y - frameSize.Y) -- Prevent negative maxY
    
    local newX = math.clamp(position.X.Offset, minX, maxX)
    local newY = math.clamp(position.Y.Offset, minY, maxY)
    
    return UDim2.new(0, newX, 0, newY)
end

-- Connect to DragUpdate to enforce boundaries
dragDetector.DragUpdate:Connect(function(detector, proposedPosition, proposedRotation)
    frame.Position = clampToScreen(proposedPosition)
end)

-- Debug: Print to confirm script runs
print("Simple menu initialized successfully")
