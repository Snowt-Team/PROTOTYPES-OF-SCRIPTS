-- WindUI
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

-- Locals
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local CurrentCamera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local CoreGui = game:GetService("CoreGui")

function gradient(text, startColor, endColor)
    local result = ""
    local length = #text

    for i = 1, length do
        local t = (i - 1) / math.max(length - 1, 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)

        local char = text:sub(i, i)
        result = result .. "<font color=\"rgb(" .. r ..", " .. g .. ", " .. b .. ")\">" .. char .. "</font>"
    end

    return result
end

local Confirmed = false

WindUI:Popup({
    Title = gradient("PRIVATE SCRIPT", Color3.fromHex("#eb1010"), Color3.fromHex("#1023eb")),
    Icon = "info",
    Content = gradient("This script made by", Color3.fromHex("#10eb3c"), Color3.fromHex("#67c97a")) .. gradient(" SnowT", Color3.fromHex("#001e80"), Color3.fromHex("#16f2d9")),
    Buttons = {
        {
            Title = gradient("Cancel", Color3.fromHex("#e80909"), Color3.fromHex("#630404")),
            Callback = function() end,
            Variant = "Tertiary", -- Primary, Secondary, Tertiary
        },
        {
            Title = gradient("Load", Color3.fromHex("#90f09e"), Color3.fromHex("#13ed34")),
            Callback = function() Confirmed = true end,
            Variant = "Secondary", -- Primary, Secondary, Tertiary
        }
    }
})

repeat task.wait() until Confirmed

WindUI:Notify({
    Title = gradient("SCRIPT SYSTEM", Color3.fromHex("#eb1010"), Color3.fromHex("#1023eb")),
    Content = "Script succesful loaded",
    Icon = "check-circle",
    Duration = 3,
})

-- Window
local Window = WindUI:CreateWindow({
    Title = gradient("PRIVATE SCRIPT", Color3.fromHex("#001e80"), Color3.fromHex("#16f2d9")),
    Icon = "infinity",
    Author = gradient("MurderersVsSheriffs", Color3.fromHex("#1bf2b2"), Color3.fromHex("#1bcbf2")),
    Folder = "WindUI",
    Size = UDim2.fromOffset(300, 270),
    Transparent = true,
    Theme = "Dark",
    SideBarWidth = 200,
    UserEnabled = true,
    HasOutline = true,
})

-- Open Button
Window:EditOpenButton({
    Title = "Open UI",
    Icon = "monitor",
    CornerRadius = UDim.new(2, 6),
    StrokeThickness = 2,
    Color = ColorSequence.new(
        Color3.fromHex("1E213D"),
        Color3.fromHex("1F75FE")
    ),
    Draggable = true,
})

-- Tabs
local Tabs = {
    MainTab = Window:Tab({ Title = gradient("MAIN", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "terminal" }),
    CharacterTab = Window:Tab({ Title = gradient("CHARACTER", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "file-cog" }),
    TeleportTab = Window:Tab({ Title = gradient("TELEPORT", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "user" }),
    EspTab = Window:Tab({ Title = gradient("ESP", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "eye" }),
    AimbotTab = Window:Tab({ Title = gradient("AIMBOT", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "arrow-right" }),
    CombatTab = Window:Tab({ Title = gradient("COMBAT", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "user"}),
    gh = Window:Divider(),
    ServerTab = Window:Tab({ Title = gradient("SERVER", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "atom", }),
    SettingsTab = Window:Tab({ Title = gradient("SETTINGS", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "code" }),
    b = Window:Divider(),
    WindowTab = Window:Tab({ Title = gradient("CONFIGURATION", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "settings", Desc = "Manage window settings and file configurations." }),
    CreateThemeTab = Window:Tab({ Title = gradient("THEMES", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "palette", Desc = "Design and apply custom themes." }),
}

-- Character
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

local CharacterSettings = {
    WalkSpeed = {Value = 16, Default = 16, Locked = false},
    JumpPower = {Value = 50, Default = 50, Locked = false}
}

local function updateCharacter()
    local character = LocalPlayer.Character
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        if not CharacterSettings.WalkSpeed.Locked then
            humanoid.WalkSpeed = CharacterSettings.WalkSpeed.Value
        end
        if not CharacterSettings.JumpPower.Locked then
            humanoid.JumpPower = CharacterSettings.JumpPower.Value
        end
    end
end
Tabs.CharacterTab:Section({Title = gradient("Walkspeed", Color3.fromHex("#ff0000"), Color3.fromHex("#300000"))})

Tabs.CharacterTab:Slider({
    Title = "Walkspeed",
    Value = {Min = 0, Max = 200, Default = 16},
    Callback = function(value)
        CharacterSettings.WalkSpeed.Value = value
        updateCharacter()
    end
})

Tabs.CharacterTab:Button({
    Title = "Reset walkspeed",
    Callback = function()
        CharacterSettings.WalkSpeed.Value = CharacterSettings.WalkSpeed.Default
        updateCharacter()
    end
})

Tabs.CharacterTab:Toggle({
    Title = "Block walkspeed",
    Default = false,
    Callback = function(state)
        CharacterSettings.WalkSpeed.Locked = state
        updateCharacter()
    end
})

Tabs.CharacterTab:Section({Title = gradient("JumpPower", Color3.fromHex("#001aff"), Color3.fromHex("#020524"))})

Tabs.CharacterTab:Slider({
    Title = "Jumppower",
    Value = {Min = 0, Max = 200, Default = 50},
    Callback = function(value)
        CharacterSettings.JumpPower.Value = value
        updateCharacter()
    end
})


Tabs.CharacterTab:Button({
    Title = "Reset jumppower",
    Callback = function()
        CharacterSettings.JumpPower.Value = CharacterSettings.JumpPower.Default
        updateCharacter()
    end
})

Tabs.CharacterTab:Toggle({
    Title = "Block jumppower",
    Default = false,
    Callback = function(state)
        CharacterSettings.JumpPower.Locked = state
        updateCharacter()
    end
})

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer
local CoreGui = game:GetService("CoreGui")

-- Teleport
Tabs.TeleportTab:Section({Title = gradient("Teleport to players", Color3.fromHex("#00448c"), Color3.fromHex("#0affd6"))})

local teleportTarget = nil
local teleportDropdown = nil

local function updateTeleportPlayers()
    local playersList = {"Select Player"}
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(playersList, player.Name)
        end
    end
    return playersList
end

local function initializeTeleportDropdown()
    teleportDropdown = Tabs.TeleportTab:Dropdown({
        Title = "Players",
        Values = updateTeleportPlayers(),
        Value = "Select Player",
        Callback = function(selected)
            if selected ~= "Select Player" then
                teleportTarget = Players:FindFirstChild(selected)
            else
                teleportTarget = nil
            end
        end
    })
end

-- Вместо старого кода инициализации телепорта вызываем:
initializeTeleportDropdown()

-- Обновляем обработчики событий игроков:
Players.PlayerAdded:Connect(function(player)
    task.wait(1) -- Даем время на инициализацию игрока
    if teleportDropdown then
        teleportDropdown:Refresh(updateTeleportPlayers())
    end
end)

Players.PlayerRemoving:Connect(function(player)
    if teleportDropdown then
        teleportDropdown:Refresh(updateTeleportPlayers())
    end
end)

local function teleportToPlayer()
    if teleportTarget and teleportTarget.Character then
        local targetRoot = teleportTarget.Character:FindFirstChild("HumanoidRootPart")
        local localRoot = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        
        if targetRoot and localRoot then
            localRoot.CFrame = targetRoot.CFrame
            WindUI:Notify({
                Title = "Teleport system",
                Content = "Teleport to "..teleportTarget.Name,
                Icon = "check-circle",
                Duration = 3
            })
        end
    else
        WindUI:Notify({
            Title = "Error",
            Content = "Target not found",
            Icon = "x-circle",
            Duration = 3
        })
    end
end

Tabs.TeleportTab:Button({
    Title = "Teleport to player",
    Callback = teleportToPlayer
})

Tabs.TeleportTab:Button({
    Title = "Update players list",
    Callback = function()
        teleportDropdown:Refresh(updateTeleportPlayers())
    end
})

-- Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Teams = game:GetService("Teams")
local TextChatService = game:GetService("TextChatService")
local CoreGui = game:GetService("CoreGui")
local LocalPlayer = Players.LocalPlayer

-- Modules
local MatchService = require(ReplicatedStorage.Modules.MatchService)

-- ESP Settings
local espSettings = {
    Highlight = {
        Enabled = false,
        Color = Color3.fromRGB(255, 0, 0),
        Transparency = 0.5
    },
    Names = {
        Enabled = false,
        Color = Color3.fromRGB(255, 0, 0),
        Size = 15
    },
    Distance = {
        Enabled = false,
        Color = Color3.fromRGB(255, 0, 0),
        Size = 15
    }
}

-- ESP Storage
local espHighlights = {}
local espBillboards = {}
local playerTeams = {} -- Store team data from MatchService

-- Function to check if a player is in an eligible team
local function isEligibleTeam(player)
    if player == LocalPlayer then
        return false
    end

    -- Exclude moderators (from GroupConfig)
    if player:GetRankInGroup(32445464) >= 10 then
        return false
    end

    -- Get team from MatchService or player.Team
    local playerTeam = playerTeams[player] and playerTeams[player].Team or player.Team
    local localTeam = playerTeams[LocalPlayer] and playerTeams[LocalPlayer].Team or LocalPlayer.Team
    local isInTargetTeam = playerTeam == Teams.Team1 or playerTeam == Teams.Team2
    local isSameTeam = playerTeam == localTeam

    -- Check TextChatService channels
    local inLilyWhite = false
    local inQuillGrey = false
    local channels = TextChatService.TextChannels
    if channels then
        local lilyChannel = channels:FindFirstChild("RBXTeamLily white")
        local quillChannel = channels:FindFirstChild("RBXTeamQuill grey")
        if lilyChannel and lilyChannel:FindFirstChild(player.Name) then
            inLilyWhite = true
        end
        if quillChannel and quillChannel:FindFirstChild(player.Name) then
            inQuillGrey = true
        end
    end

    return (isInTargetTeam or inLilyWhite or inQuillGrey) and not isSameTeam
end

-- Function to create or update ESP for a player
local function createEsp(player)
    if not isEligibleTeam(player) then
        return
    end

    local character = player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        return
    end

    -- Highlight
    if espSettings.Highlight.Enabled then
        local highlight = Instance.new("Highlight")
        highlight.Adornee = character
        highlight.FillColor = espSettings.Highlight.Color
        highlight.FillTransparency = espSettings.Highlight.Transparency
        highlight.OutlineColor = espSettings.Highlight.Color
        highlight.OutlineTransparency = 0
        highlight.Parent = CoreGui
        espHighlights[player] = highlight
    end

    -- BillboardGui for Names and Distance
    local billboard = Instance.new("BillboardGui")
    billboard.Adornee = character:FindFirstChild("HumanoidRootPart")
    billboard.Size = UDim2.new(0, 200, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.AlwaysOnTop = true
    billboard.Parent = CoreGui
    espBillboards[player] = billboard

    -- Name Label
    if espSettings.Names.Enabled then
        local nameLabel = Instance.new("TextLabel")
        nameLabel.Size = UDim2.new(1, 0, 0, 25)
        nameLabel.Position = UDim2.new(0, 0, 0, 0)
        nameLabel.BackgroundTransparency = 1
        nameLabel.Text = player.Name
        nameLabel.TextColor3 = espSettings.Names.Color
        nameLabel.TextSize = espSettings.Names.Size
        nameLabel.Font = Enum.Font.SourceSansBold
        nameLabel.TextStrokeTransparency = 0.5
        nameLabel.Parent = billboard
    end

    -- Distance Label
    if espSettings.Distance.Enabled then
        local distanceLabel = Instance.new("TextLabel")
        distanceLabel.Size = UDim2.new(1, 0, 0, 25)
        distanceLabel.Position = UDim2.new(0, 0, 0, 25)
        distanceLabel.BackgroundTransparency = 1
        distanceLabel.Text = "Calculating..."
        distanceLabel.TextColor3 = espSettings.Distance.Color
        distanceLabel.TextSize = espSettings.Distance.Size
        distanceLabel.Font = Enum.Font.SourceSansBold
        distanceLabel.TextStrokeTransparency = 0.5
        distanceLabel.Parent = billboard
    end
end

-- Function to remove ESP for a player
local function removeEsp(player)
    if espHighlights[player] then
        espHighlights[player]:Destroy()
        espHighlights[player] = nil
    end
    if espBillboards[player] then
        espBillboards[player]:Destroy()
        espBillboards[player] = nil
    end
end

-- Function to toggle ESP
local function toggleEsp()
    for _, player in pairs(Players:GetPlayers()) do
        removeEsp(player)
        if espSettings.Highlight.Enabled or espSettings.Names.Enabled or espSettings.Distance.Enabled then
            createEsp(player)
        end
    end
end

-- Update distance labels
RunService.RenderStepped:Connect(function()
    if espSettings.Distance.Enabled then
        for player, billboard in pairs(espBillboards) do
            local distanceLabel = billboard:FindFirstChildOfClass("TextLabel", true)
            if distanceLabel and player.Character and LocalPlayer.Character then
                local targetRoot = player.Character:FindFirstChild("HumanoidRootPart")
                local localRoot = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if targetRoot and localRoot then
                    local distance = (targetRoot.Position - localRoot.Position).Magnitude
                    distanceLabel.Text = math.floor(distance) .. " studs"
                else
                    distanceLabel.Text = "N/A"
                end
            end
        end
    end
end)

-- Handle player added
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        if espSettings.Highlight.Enabled or espSettings.Names.Enabled or espSettings.Distance.Enabled then
            createEsp(player)
        end
    end)
end)

-- Handle player removing
Players.PlayerRemoving:Connect(function(player)
    removeEsp(player)
    playerTeams[player] = nil
end)

-- Handle team changes via MatchService
MatchService:GetMatchStartedSignal():Connect(function(_, _, teamData)
    playerTeams = teamData -- Update team assignments
    toggleEsp()
end)

-- Handle local team changes
LocalPlayer:GetPropertyChangedSignal("Team"):Connect(function()
    toggleEsp()
end)

-- ESP UI Section
Tabs.EspTab:Section({
    Title = gradient("Highlight Settings", Color3.fromHex("#001e80"), Color3.fromHex("#16f2d9"))
})

Tabs.EspTab:Toggle({
    Title = gradient("Enable Highlight", Color3.fromHex("#001e80"), Color3.fromHex("#16f2d9")),
    Default = false,
    Callback = function(state)
        espSettings.Highlight.Enabled = state
        toggleEsp()
    end
})

Tabs.EspTab:Slider({
    Title = gradient("Highlight Transparency", Color3.fromHex("#001e80"), Color3.fromHex("#16f2d9")),
    Step = 0.1,
    Value = {Min = 0, Max = 1, Default = 0.5},
    Callback = function(value)
        espSettings.Highlight.Transparency = value
        for player, highlight in pairs(espHighlights) do
            highlight.FillTransparency = value
        end
    end
})

Tabs.EspTab:Colorpicker({
    Title = gradient("Highlight Color", Color3.fromHex("#001e80"), Color3.fromHex("#16f2d9")),
    Default = Color3.fromRGB(255, 0, 0),
    Transparency = 0,
    Callback = function(color)
        espSettings.Highlight.Color = color
        for player, highlight in pairs(espHighlights) do
            highlight.FillColor = color
            highlight.OutlineColor = color
        end
    end
})

Tabs.EspTab:Section({
    Title = gradient("Name ESP Settings", Color3.fromHex("#e80909"), Color3.fromHex("#630404"))
})

Tabs.EspTab:Toggle({
    Title = gradient("Enable Names", Color3.fromHex("#e80909"), Color3.fromHex("#630404")),
    Default = false,
    Callback = function(state)
        espSettings.Names.Enabled = state
        toggleEsp()
    end
})

Tabs.EspTab:Slider({
    Title = gradient("Name Size", Color3.fromHex("#e80909"), Color3.fromHex("#630404")),
    Value = {Min = 5, Max = 25, Default = 15},
    Callback = function(value)
        espSettings.Names.Size = value
        for player, billboard in pairs(espBillboards) do
            local nameLabel = billboard:FindFirstChildOfClass("TextLabel")
            if nameLabel and nameLabel.Text == player.Name then
                nameLabel.TextSize = value
            end
        end
    end
})

Tabs.EspTab:Colorpicker({
    Title = gradient("Name Color", Color3.fromHex("#e80909"), Color3.fromHex("#630404")),
    Default = Color3.fromRGB(255, 0, 0),
    Transparency = 0,
    Callback = function(color)
        espSettings.Names.Color = color
        for player, billboard in pairs(espBillboards) do
            local nameLabel = billboard:FindFirstChildOfClass("TextLabel")
            if nameLabel and nameLabel.Text == player.Name then
                nameLabel.TextColor3 = color
            end
        end
    end
})

Tabs.EspTab:Section({
    Title = gradient("Distance ESP Settings", Color3.fromHex("#0ff707"), Color3.fromHex("#1e690c"))
})

Tabs.EspTab:Toggle({
    Title = gradient("Enable Distance", Color3.fromHex("#0ff707"), Color3.fromHex("#1e690c")),
    Default = false,
    Callback = function(state)
        espSettings.Distance.Enabled = state
        toggleEsp()
    end
})

Tabs.EspTab:Slider({
    Title = gradient("Distance Size", Color3.fromHex("#0ff707"), Color3.fromHex("#1e690c")),
    Value = {Min = 5, Max = 25, Default = 15},
    Callback = function(value)
        espSettings.Distance.Size = value
        for player, billboard in pairs(espBillboards) do
            local distanceLabel = billboard:FindFirstChildOfClass("TextLabel", true)
            if distanceLabel and distanceLabel.Text ~= player.Name then
                distanceLabel.TextSize = value
            end
        end
    end
})

Tabs.EspTab:Colorpicker({
    Title = gradient("Distance Color", Color3.fromHex("#0ff707"), Color3.fromHex("#1e690c")),
    Default = Color3.fromRGB(255, 0, 0),
    Transparency = 0,
    Callback = function(color)
        espSettings.Distance.Color = color
        for player, billboard in pairs(espBillboards) do
            local distanceLabel = billboard:FindFirstChildOfClass("TextLabel", true)
            if distanceLabel and distanceLabel.Text ~= player.Name then
                distanceLabel.TextColor3 = color
            end
        end
    end
})