local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local TextService = game:GetService("TextService")
local CoreGui = game:GetService("CoreGui")
local Players = game:GetService("Players")
local RobloxGui = CoreGui:WaitForChild("RobloxGui")

local GUI_WIDTH = 450
local GUI_HEIGHT = 300
local TWEEN_INFO = TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
local MAX_REMOTES = 300
local DEBOUNCE_DELAY = 0.1

local GuiInset = RobloxGui.AbsoluteSize - RobloxGui.AbsolutePosition
local mouse = Players.LocalPlayer:GetMouse()
local layoutOrderNum = 999999999
local closed = false
local sideClosed = false
local dragging = false
local mouseDown = false
local touchId = nil
local mouseInGui = false
local logs = {}
local remoteLogs = {}
local selected = nil
local selectedLog = nil
local tooltipCache = {}
local lastCanvasUpdate = 0
local logQueue = {}
local autoScroll = true
local SIMPLESPYCONFIG = {
    MaxRemotes = MAX_REMOTES,
    AutoBlock = false,
    Enabled = true,
    OverrideSelection = true,
    LogCheckCaller = false,
    AutoScroll = true
}

local function Create(className, properties, children)
    local inst = Instance.new(className)
    for prop, value in pairs(properties or {}) do
        inst[prop] = value
    end
    for _, child in pairs(children or {}) do
        child.Parent = inst
    end
    return inst
end

local function logThreadFunc(thread)
    coroutine.yield()
end

local function getScript(obj)
    if not obj then return "" end
    for _, v in pairs(getnilinstances and getnilinstances() or {}) do
        if v == obj then return "nil" end
    end
    return tostring(obj)
end

local function getCallingScript()
    local success, script = pcall(getScript, getcallingscript and getcallingscript())
    return success and script or "?"
end

local function debounce(func, delay)
    local lastCall = 0
    return function(...)
        local now = tick()
        if now - lastCall < delay then return end
        lastCall = now
        return func(...)
    end
end

local function clean()
    while #remoteLogs > SIMPLESPYCONFIG.MaxRemotes do
        local t = remoteLogs[#remoteLogs]
        table.remove(remoteLogs, #remoteLogs)
        if t[1] then t[1]:Disconnect() end
        if t[2] then t[2]:Destroy() end
    end
end

local function updateRemoteCanvas()
    if tick() - lastCanvasUpdate < DEBOUNCE_DELAY then return end
    lastCanvasUpdate = tick()
    LogList.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y + 8)
    if autoScroll and not closed then
        LogList.CanvasPosition = Vector2.new(0, LogList.CanvasSize.Y.Offset)
    end
end

local function updateFunctionCanvas()
    ScrollingFrame.CanvasSize = UDim2.new(0, UIGridLayout.AbsoluteContentSize.X + 16, 0, 0)
end

local function makeToolTip(visible, text)
    if not visible or not text then
        ToolTip.Visible = false
        return
    end
    if tooltipCache[text] then
        TextLabel.Size = tooltipCache[text].labelSize
        ToolTip.Size = tooltipCache[text].toolTipSize
    else
        TextLabel.Text = text
        local size = TextService:GetTextSize(text, TextLabel.TextSize, TextLabel.Font, Vector2.new(184, math.huge))
        TextLabel.Size = UDim2.new(0, size.X, 0, size.Y)
        ToolTip.Size = UDim2.new(0, size.X + 16, 0, size.Y + 16)
        tooltipCache[text] = {
            labelSize = TextLabel.Size,
            toolTipSize = ToolTip.Size
        }
    end
    ToolTip.Position = UDim2.new(0, mouse.X - GuiInset.X, 0, mouse.Y + GuiInset.Y - 10)
    ToolTip.Visible = true
end

local function validateSize()
    local targetSize = closed and UDim2.new(0, sideClosed and 140 or GUI_WIDTH, 0, 40) or
                      UDim2.new(0, sideClosed and 140 or GUI_WIDTH, 0, GUI_HEIGHT)
    TweenService:Create(Background, TWEEN_INFO, {Size = targetSize}):Play()
end

local function minimizeSize(speed)
    speed = speed or 0.3
    closed = true
    validateSize()
    local tweenInfo = TweenInfo.new(speed, Enum.EasingStyle.Sine)
    TweenService:Create(LeftPanel, tweenInfo, {Size = UDim2.new(0, 140, 0, 0)}):Play()
    TweenService:Create(RightPanel, tweenInfo, {Size = UDim2.new(0, sideClosed and 0 or 310, 0, 0)}):Play()
    TweenService:Create(ScrollingFrame, tweenInfo, {Size = UDim2.new(0, 0, 0, 0), Position = UDim2.new(0, 0, 0, 0)}):Play()
    TweenService:Create(CodeBox, tweenInfo, {Size = UDim2.new(0, 0, 0, 0)}):Play()
    TweenService:Create(LogList, tweenInfo, {Size = UDim2.new(0, 0, 0, 0)}):Play()
end

local function maximizeSize(speed)
    speed = speed or 0.3
    closed = false
    validateSize()
    local tweenInfo = TweenInfo.new(speed, Enum.EasingStyle.Sine)
    TweenService:Create(LeftPanel, tweenInfo, {Size = UDim2.new(0, 140, 0, 260)}):Play()
    TweenService:Create(RightPanel, tweenInfo, {Size = UDim2.new(0, sideClosed and 0 or 310, 0, 260)}):Play()
    TweenService:Create(ScrollingFrame, tweenInfo, {Size = UDim2.new(1, 0, 0.4, -8), Position = UDim2.new(0, 0, 0.6, 8)}):Play()
    TweenService:Create(CodeBox, tweenInfo, {Size = UDim2.new(1, 0, 0.6, 0)}):Play()
    TweenService:Create(LogList, tweenInfo, {Size = UDim2.new(1, 0, 1, -48)}):Play()
end

local function centerGui()
    local viewportSize = workspace.CurrentCamera.ViewportSize
    local centerX = (viewportSize.X - GUI_WIDTH) / 2
    local centerY = (viewportSize.Y - GUI_HEIGHT) / 2
    Background.Position = UDim2.new(0, centerX, 0, centerY)
end

local function bringBackOnResize()
    validateSize()
    if sideClosed then minimizeSize() else maximizeSize() end
    local viewportSize = workspace.CurrentCamera.ViewportSize
    local scale = math.min(viewportSize.X / GUI_WIDTH, viewportSize.Y / GUI_HEIGHT)
    Scale.Scale = math.clamp(scale, 0.7, 1)
    local currentX = Background.AbsolutePosition.X
    local currentY = Background.AbsolutePosition.Y
    currentX = math.clamp(currentX, 0, viewportSize.X - (sideClosed and 140 or Background.AbsoluteSize.X))
    currentY = math.clamp(currentY, 0, viewportSize.Y - (closed and 40 or Background.AbsoluteSize.Y) - GuiInset.Y)
    TweenService:Create(Background, TWEEN_INFO, {Position = UDim2.new(0, currentX, 0, currentY)}):Play()
end

local function eventSelect(log)
    if selected then
        TweenService:Create(selected.Button, TWEEN_INFO, {BackgroundColor3 = Color3.fromRGB(31, 41, 55)}):Play()
    end
    selected = log
    TweenService:Create(log.Button, TWEEN_INFO, {BackgroundColor3 = Color3.fromRGB(59, 130, 246)}):Play()
    selectedLog = log
    currentRightCode = log.GenScript
    currentLeftCode = log.Function
end

local function newButton(name, description, onClick)
    local FunctionTemplate = Create("Frame", {
        Name = "FunctionTemplate",
        Parent = ScrollingFrame,
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 40, 0, 40)
    })
    local Button = Create("TextButton", {
        Name = "Button",
        Parent = FunctionTemplate,
        BackgroundColor3 = Color3.fromRGB(37, 99, 235),
        Size = UDim2.new(0, 40, 0, 40),
        Font = Enum.Font.SourceSans,
        Text = name:sub(1, 1),
        TextColor3 = Color3.new(1, 1, 1),
        TextSize = 16,
        AutoButtonColor = false
    }, {
        Create("UICorner", {CornerRadius = UDim.new(1, 0)}),
        Create("UIStroke", {Color = Color3.fromRGB(59, 130, 246), Thickness = 1, Transparency = 0.5})
    })
    Button.MouseEnter:Connect(function()
        makeToolTip(true, description())
        TweenService:Create(Button, TWEEN_INFO, {BackgroundColor3 = Color3.fromRGB(59, 130, 246)}):Play()
    end)
    Button.MouseLeave:Connect(function()
        makeToolTip(false)
        TweenService:Create(Button, TWEEN_INFO, {BackgroundColor3 = Color3.fromRGB(37, 99, 235)}):Play()
    end)
    FunctionTemplate.AncestryChanged:Connect(function()
        makeToolTip(false)
    end)
    Button.MouseButton1Click:Connect(function(...)
        task.spawn(onClick, FunctionTemplate, ...)
    end)
    updateFunctionCanvas()
end

local function processLogQueue()
    if #logQueue == 0 then return end
    local data = table.remove(logQueue, 1)
    local remote = data.remote
    local callingscript = data.callingscript
    local RemoteTemplate = Create("Frame", {
        LayoutOrder = layoutOrderNum,
        Name = "RemoteTemplate",
        Parent = LogList,
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 132, 0, 28)
    })
    local ColorBar = Create("Frame", {
        Name = "ColorBar",
        Parent = RemoteTemplate,
        BackgroundColor3 = (data.type == "event" and Color3.fromRGB(234, 179, 8)) or Color3.fromRGB(59, 130, 246),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 4, 0, 4),
        Size = UDim2.new(0, 8, 0, 20),
        ZIndex = 2
    }, {
        Create("UICorner", {CornerRadius = UDim.new(1, 0)})
    })
    local Text = Create("TextLabel", {
        TextTruncate = Enum.TextTruncate.AtEnd,
        Name = "Text",
        Parent = RemoteTemplate,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 16, 0, 4),
        Size = UDim2.new(0, 108, 0, 20),
        ZIndex = 2,
        Font = Enum.Font.SourceSansPro,
        Text = remote.Name,
        TextColor3 = Color3.new(1, 1, 1),
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    local Button = Create("TextButton", {
        Name = "Button",
        Parent = RemoteTemplate,
        BackgroundColor3 = Color3.fromRGB(31, 41, 55),
        BackgroundTransparency = 0.5,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 4, 0, 4),
        Size = UDim2.new(0, 124, 0, 20),
        AutoButtonColor = false,
        Font = Enum.Font.SourceSansPro,
        Text = "",
        TextColor3 = Color3.new(0, 0, 0),
        TextSize = 14
    }, {
        Create("UICorner", {CornerRadius = UDim.new(0, 6)}),
        Create("UIStroke", {Color = Color3.fromRGB(55, 65, 81), Thickness = 1})
    })
    local log = {
        Name = remote.Name,
        Function = data.infofunc or "-- Function Info is disabled",
        Remote = remote,
        DebugId = data.id,
        metamethod = data.metamethod,
        args = data.args,
        Log = RemoteTemplate,
        Button = Button,
        Blocked = data.blocked,
        Source = callingscript,
        returnvalue = data.returnvalue,
        GenScript = "-- Generating, please wait...\n-- (If this message persists, the remote args are likely extremely long)"
    }
    logs[#logs + 1] = log
    local connect = Button.MouseButton1Click:Connect(function()
        task.spawn(function()
            eventSelect(log)
            log.GenScript = genScript(log.Remote, log.args)
            if data.blocked then
                log.GenScript = "-- THIS REMOTE WAS PREVENTED FROM FIRING TO THE SERVER BY SIMPLESPY\n\n" .. log.GenScript
            end
            if selected == log and RemoteTemplate then
                eventSelect(log)
            end
        end)
    end)
    Button.MouseEnter:Connect(function()
        TweenService:Create(Button, TWEEN_INFO, {BackgroundColor3 = Color3.fromRGB(55, 65, 81)}):Play()
    end)
    Button.MouseLeave:Connect(function()
        TweenService:Create(Button, TWEEN_INFO, {BackgroundColor3 = Color3.fromRGB(31, 41, 55)}):Play()
    end)
    layoutOrderNum = math.max(1, layoutOrderNum - 1)
    table.insert(remoteLogs, 1, {connect, RemoteTemplate})
    clean()
    updateRemoteCanvas()
end

local function newRemote(type, data)
    table.insert(logQueue, {type = type, remote = data.remote, callingscript = data.callingscript, infofunc = data.infofunc, args = data.args, blocked = data.blocked, id = data.id, metamethod = data.metamethod, returnvalue = data.returnvalue})
    task.spawn(processLogQueue)
end

local function genScript(remote, args)
    local scriptStr = "local remote = " .. getScript(remote) .. "\nremote:"
    if remote:IsA("RemoteEvent") then
        scriptStr = scriptStr .. "FireServer("
    elseif remote:IsA("RemoteFunction") then
        scriptStr = scriptStr .. "InvokeServer("
    end
    for i, v in pairs(args) do
        scriptStr = scriptStr .. tostring(v)
        if i < #args then scriptStr = scriptStr .. ", " end
    end
    scriptStr = scriptStr .. ")"
    return scriptStr
end

local SimpleSpy3 = Create("ScreenGui", {
    Parent = CoreGui,
    ResetOnSpawn = false,
    IgnoreGuiInset = true
})
local Scale = Create("UIScale", {
    Parent = SimpleSpy3,
    Scale = 1
})
local Storage = Create("Folder", {
    Parent = SimpleSpy3
})
local Background = Create("Frame", {
    Parent = SimpleSpy3,
    BackgroundColor3 = Color3.fromRGB(0, 0, 0),
    BackgroundTransparency = 0.3,
    Position = UDim2.new(0.5, -GUI_WIDTH / 2, 0.5, -GUI_HEIGHT / 2),
    Size = UDim2.new(0, GUI_WIDTH, 0, GUI_HEIGHT),
    ClipsDescendants = true
}, {
    Create("UICorner", {CornerRadius = UDim.new(0, 16)}),
    Create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(20, 30, 50)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 20, 40))
        }),
        Rotation = 45
    }),
    Create("UIStroke", {Color = Color3.fromRGB(59, 130, 246), Thickness = 2, Transparency = 0.5})
})
local Shadow = Create("Frame", {
    Parent = Background,
    BackgroundColor3 = Color3.fromRGB(0, 0, 0),
    BackgroundTransparency = 0.5,
    Position = UDim2.new(0, 4, 0, 4),
    Size = UDim2.new(1, 8, 1, 8),
    ZIndex = -1
}, {
    Create("UICorner", {CornerRadius = UDim.new(0, 16)})
})
local TopBar = Create("Frame", {
    Parent = Background,
    BackgroundColor3 = Color3.fromRGB(17, 24, 39),
    BackgroundTransparency = 0.2,
    BorderSizePixel = 0,
    Size = UDim2.new(0, GUI_WIDTH, 0, 40)
}, {
    Create("UICorner", {CornerRadius = UDim.new(0, 12)}),
    Create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(30, 40, 60)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(20, 30, 50))
        })
    })
})
local Simple = Create("TextButton", {
    Parent = TopBar,
    BackgroundTransparency = 1,
    Position = UDim2.new(0, 12, 0, 0),
    Size = UDim2.new(0, 100, 0, 40),
    Font = Enum.Font.SourceSans,
    Text = "SimpleSpy V3",
    TextColor3 = Color3.new(1, 1, 1),
    TextSize = 18,
    TextXAlignment = Enum.TextXAlignment.Left,
    AutoButtonColor = false
})
local CloseButton = Create("TextButton", {
    Parent = TopBar,
    BackgroundColor3 = Color3.fromRGB(220, 38, 38),
    BorderSizePixel = 0,
    Position = UDim2.new(1, -44, 0, 4),
    Size = UDim2.new(0, 32, 0, 32),
    Font = Enum.Font.SourceSans,
    Text = "",
    TextColor3 = Color3.new(0, 0, 0),
    TextSize = 14
}, {
    Create("UICorner", {CornerRadius = UDim.new(1, 0)}),
    Create("UIStroke", {Color = Color3.fromRGB(255, 100, 100), Thickness = 1}),
    Create("ImageLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 8, 0, 8),
        Size = UDim2.new(0, 16, 0, 16),
        Image = "http://www.roblox.com/asset/?id=5597086202"
    })
})
local MaximizeButton = Create("TextButton", {
    Parent = TopBar,
    BackgroundColor3 = Color3.fromRGB(55, 65, 81),
    BorderSizePixel = 0,
    Position = UDim2.new(1, -88, 0, 4),
    Size = UDim2.new(0, 32, 0, 32),
    Font = Enum.Font.SourceSans,
    Text = "",
    TextColor3 = Color3.new(0, 0, 0),
    TextSize = 14
}, {
    Create("UICorner", {CornerRadius = UDim.new(1, 0)}),
    Create("UIStroke", {Color = Color3.fromRGB(75, 85, 101), Thickness = 1}),
    Create("ImageLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 8, 0, 8),
        Size = UDim2.new(0, 16, 0, 16),
        Image = "http://www.roblox.com/asset/?id=5597108117"
    })
})
local MinimizeButton = Create("TextButton", {
    Parent = TopBar,
    BackgroundColor3 = Color3.fromRGB(55, 65, 81),
    BorderSizePixel = 0,
    Position = UDim2.new(1, -132, 0, 4),
    Size = UDim2.new(0, 32, 0, 32),
    Font = Enum.Font.SourceSans,
    Text = "",
    TextColor3 = Color3.new(0, 0, 0),
    TextSize = 14
}, {
    Create("UICorner", {CornerRadius = UDim.new(1, 0)}),
    Create("UIStroke", {Color = Color3.fromRGB(75, 85, 101), Thickness = 1}),
    Create("ImageLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 8, 0, 8),
        Size = UDim2.new(0, 16, 0, 16),
        Image = "http://www.roblox.com/asset/?id=5597105827"
    })
})
local AutoScrollButton = Create("TextButton", {
    Parent = TopBar,
    BackgroundColor3 = SIMPLESPYCONFIG.AutoScroll and Color3.fromRGB(37, 99, 235) or Color3.fromRGB(55, 65, 81),
    BorderSizePixel = 0,
    Position = UDim2.new(1, -176, 0, 4),
    Size = UDim2.new(0, 32, 0, 32),
    Font = Enum.Font.SourceSans,
    Text = "",
    TextColor3 = Color3.new(0, 0, 0),
    TextSize = 14
}, {
    Create("UICorner", {CornerRadius = UDim.new(1, 0)}),
    Create("UIStroke", {Color = Color3.fromRGB(75, 85, 101), Thickness = 1}),
    Create("ImageLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 8, 0, 8),
        Size = UDim2.new(0, 16, 0, 16),
        Image = "http://www.roblox.com/asset/?id=6026568247"
    })
})
local LeftPanel = Create("Frame", {
    Parent = Background,
    BackgroundColor3 = Color3.fromRGB(17, 24, 39),
    BackgroundTransparency = 0.2,
    BorderSizePixel = 0,
    Position = UDim2.new(0, 0, 0, 40),
    Size = UDim2.new(0, 140, 0, 260)
}, {
    Create("UICorner", {CornerRadius = UDim.new(0, 12)}),
    Create("UIStroke", {Color = Color3.fromRGB(59, 130, 246), Thickness = 1, Transparency = 0.7})
})
local SearchBar = Create("TextBox", {
    Parent = LeftPanel,
    BackgroundColor3 = Color3.fromRGB(31, 41, 55),
    BackgroundTransparency = 0.3,
    Size = UDim2.new(1, -8, 0, 32),
    Position = UDim2.new(0, 4, 0, 4),
    Font = Enum.Font.SourceSansPro,
    PlaceholderText = "Search remotes...",
    Text = "",
    TextColor3 = Color3.new(1, 1, 1),
    TextSize = 14,
    ClearTextOnFocus = false
}, {
    Create("UICorner", {CornerRadius = UDim.new(0, 8)}),
    Create("UIStroke", {Color = Color3.fromRGB(55, 65, 81), Thickness = 1})
})
local LogList = Create("ScrollingFrame", {
    Parent = LeftPanel,
    Active = true,
    BackgroundTransparency = 1,
    BorderSizePixel = 0,
    Position = UDim2.new(0, 0, 0, 40),
    Size = UDim2.new(1, 0, 1, -48),
    CanvasSize = UDim2.new(0, 0, 0, 0),
    ScrollBarThickness = 4,
    ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
})
local UIListLayout = Create("UIListLayout", {
    Parent = LogList,
    HorizontalAlignment = Enum.HorizontalAlignment.Center,
    SortOrder = Enum.SortOrder.LayoutOrder,
    Padding = UDim.new(0, 4)
})
local RightPanel = Create("Frame", {
    Parent = Background,
    BackgroundColor3 = Color3.fromRGB(17, 24, 39),
    BackgroundTransparency = 0.2,
    BorderSizePixel = 0,
    Position = UDim2.new(0, 140, 0, 40),
    Size = UDim2.new(0, 310, 0, 260)
}, {
    Create("UICorner", {CornerRadius = UDim.new(0, 12)}),
    Create("UIStroke", {Color = Color3.fromRGB(59, 130, 246), Thickness = 1, Transparency = 0.7})
})
local CodeBox = Create("Frame", {
    Parent = RightPanel,
    BackgroundColor3 = Color3.fromRGB(31, 41, 55),
    BackgroundTransparency = 0.3,
    BorderSizePixel = 0,
    Size = UDim2.new(1, 0, 0.6, 0)
}, {
    Create("UICorner", {CornerRadius = UDim.new(0, 8)}),
    Create("UIStroke", {Color = Color3.fromRGB(55, 65, 81), Thickness = 1})
})
local ScrollingFrame = Create("ScrollingFrame", {
    Parent = RightPanel,
    Active = true,
    BackgroundTransparency = 1,
    Position = UDim2.new(0, 0, 0.6, 8),
    Size = UDim2.new(1, 0, 0.4, -8),
    CanvasSize = UDim2.new(0, 0, 0, 0),
    ScrollBarThickness = 4,
    ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
})
local UIGridLayout = Create("UIGridLayout", {
    Parent = ScrollingFrame,
    HorizontalAlignment = Enum.HorizontalAlignment.Center,
    SortOrder = Enum.SortOrder.LayoutOrder,
    CellPadding = UDim2.new(0, 8, 0, 8),
    CellSize = UDim2.new(0, 40, 0, 40)
})
local ToolTip = Create("Frame", {
    Parent = SimpleSpy3,
    BackgroundColor3 = Color3.fromRGB(31, 41, 55),
    BackgroundTransparency = 0.2,
    BorderColor3 = Color3.fromRGB(59, 130, 246),
    Size = UDim2.new(0, 200, 0, 50),
    ZIndex = 10,
    Visible = false
}, {
    Create("UICorner", {CornerRadius = UDim.new(0, 8)}),
    Create("UIStroke", {Color = Color3.fromRGB(59, 130, 246), Thickness = 1, Transparency = 0.5})
})
local TextLabel = Create("TextLabel", {
    Parent = ToolTip,
    BackgroundTransparency = 1,
    Position = UDim2.new(0, 8, 0, 8),
    Size = UDim2.new(0, 184, 0, 34),
    ZIndex = 10,
    Font = Enum.Font.SourceSansPro,
    Text = "Tooltip text",
    TextColor3 = Color3.new(1, 1, 1),
    TextSize = 14,
    TextWrapped = true,
    TextXAlignment = Enum.TextXAlignment.Left,
    TextYAlignment = Enum.TextYAlignment.Top
})

local lastQuery = ""
SearchBar:GetPropertyChangedSignal("Text"):Connect(debounce(function()
    local query = SearchBar.Text:lower()
    if query == lastQuery then return end
    lastQuery = query
    for _, v in pairs(LogList:GetChildren()) do
        if v:IsA("Frame") then
            local textLabel = v:FindFirstChild("Text")
            v.Visible = textLabel and textLabel.Text:lower():find(query) ~= nil
        end
    end
    updateRemoteCanvas()
end, DEBOUNCE_DELAY))

local function addHoverEffect(button, normalColor, hoverColor)
    button.MouseEnter:Connect(function()
        TweenService:Create(button, TWEEN_INFO, {BackgroundColor3 = hoverColor}):Play()
    end)
    button.MouseLeave:Connect(function()
        TweenService:Create(button, TWEEN_INFO, {BackgroundColor3 = normalColor}):Play()
    end)
end
addHoverEffect(CloseButton, Color3.fromRGB(220, 38, 38), Color3.fromRGB(239, 68, 68))
addHoverEffect(MaximizeButton, Color3.fromRGB(55, 65, 81), Color3.fromRGB(75, 85, 101))
addHoverEffect(MinimizeButton, Color3.fromRGB(55, 65, 81), Color3.fromRGB(75, 85, 101))
addHoverEffect(AutoScrollButton, SIMPLESPYCONFIG.AutoScroll and Color3.fromRGB(37, 99, 235) or Color3.fromRGB(55, 65, 81),
    SIMPLESPYCONFIG.AutoScroll and Color3.fromRGB(59, 130, 246) or Color3.fromRGB(75, 85, 101))
addHoverEffect(Simple, Color3.fromRGB(0, 0, 0), Color3.fromRGB(0, 0, 0))

CloseButton.MouseButton1Click:Connect(function()
    task.spawn(function()
        SimpleSpy3.Enabled = false
    end)
end)
MaximizeButton.MouseButton1Click:Connect(function()
    task.spawn(function()
        sideClosed = not sideClosed
        if sideClosed then minimizeSize() else maximizeSize() end
        bringBackOnResize()
    end)
end)
MinimizeButton.MouseButton1Click:Connect(function()
    task.spawn(function()
        if closed then maximizeSize() else minimizeSize() end
        bringBackOnResize()
    end)
end)
AutoScrollButton.MouseButton1Click:Connect(function()
    task.spawn(function()
        SIMPLESPYCONFIG.AutoScroll = not SIMPLESPYCONFIG.AutoScroll
        autoScroll = SIMPLESPYCONFIG.AutoScroll
        local color = autoScroll and Color3.fromRGB(37, 99, 235) or Color3.fromRGB(55, 65, 81)
        TweenService:Create(AutoScrollButton, TWEEN_INFO, {BackgroundColor3 = color}):Play()
        updateRemoteCanvas()
    end)
end)

local dragStartPos = nil
Simple.MouseButton1Down:Connect(function()
    dragging = true
    mouseDown = true
    dragStartPos = Vector2.new(mouse.X, mouse.Y)
end)
UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = false
        mouseDown = false
        touchId = nil
        dragStartPos = nil
    end
end)
UserInputService.TouchStarted:Connect(function(input)
    if Background:IsAncestorOf(input.Position) and not touchId then
        dragging = true
        touchId = input.UserInputId
        dragStartPos = input.Position
    end
end)
UserInputService.InputChanged:Connect(function(input)
    if not dragging then return end
    local pos
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        pos = Vector2.new(input.Position.X, input.Position.Y)
    elseif input.UserInputType == Enum.UserInputType.Touch and input.UserInputId == touchId then
        pos = input.Position
    else
        return
    end
    if not dragStartPos then return end
    local delta = pos - dragStartPos
    local viewportSize = workspace.CurrentCamera.ViewportSize
    local newX = math.clamp(Background.Position.X.Offset + delta.X, 0, viewportSize.X - Background.Size.X.Offset)
    local newY = math.clamp(Background.Position.Y.Offset + delta.Y, 0, viewportSize.Y - Background.Size.Y.Offset - GuiInset.Y)
    TweenService:Create(Background, TweenInfo.new(0.1, Enum.EasingStyle.Linear), {
        Position = UDim2.new(0, newX, 0, newY)
    }):Play()
    dragStartPos = pos
end)

local function hookRemote(remote, method, args)
    if SIMPLESPYCONFIG.LogCheckCaller and not checkcaller() then return end
    local callingscript = getCallingScript()
    local data = {
        remote = remote,
        callingscript = callingscript,
        infofunc = "-- Function Info is disabled",
        args = args,
        blocked = SIMPLESPYCONFIG.AutoBlock,
        returnvalue = nil,
        id = remote:GetDebugId(),
        metamethod = method
    }
    newRemote(method == "FireServer" and "event" or "function", data)
end

local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
    if not SIMPLESPYCONFIG.Enabled then return oldNamecall(self, ...) end
    local method = getnamecallmethod()
    if (method == "FireServer" or method == "InvokeServer") and (self:IsA("RemoteEvent") or self:IsA("RemoteFunction")) then
        hookRemote(self, method, {...})
    end
    return oldNamecall(self, ...)
end)

newButton("Copy Code", function() return "Copy the generated script to clipboard" end, function()
    setclipboard(currentRightCode or "")
end)
newButton("Run Code", function() return "Execute the generated script" end, function()
    loadstring(currentRightCode or "")()
end)
newButton("Clear Logs", function() return "Remove all logged remotes" end, function()
    for _, v in pairs(remoteLogs) do
        if v[1] then v[1]:Disconnect() end
        if v[2] then v[2]:Destroy() end
    end
    remoteLogs = {}
    logs = {}
    selected = nil
    selectedLog = nil
    updateRemoteCanvas()
end)
newButton("Exclude", function() return "Block this remote from future logs" end, function()
    if selectedLog then
        SIMPLESPYCONFIG.AutoBlock = true
        selectedLog.Blocked = true
    end
end)
newButton("Toggle Check", function() return "Toggle caller checking for remote logs" end, function()
    SIMPLESPYCONFIG.LogCheckCaller = not SIMPLESPYCONFIG.LogCheckCaller
end)

centerGui()
bringBackOnResize()
UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        mouseInGui = Background:IsAncestorOf(input.Position and input.Position or mouse.Target)
    end
end)
RunService:BindToRenderStep("SimpleSpy", Enum.RenderPriority.Input.Value, function()
    if mouseInGui and ToolTip.Visible then
        ToolTip.Position = UDim2.new(0, mouse.X - GuiInset.X, 0, mouse.Y + GuiInset.Y - 10)
    end
end)

local function handleError(err)
    warn("SimpleSpy Error: " .. tostring(err))
end
xpcall(function()
    if not SimpleSpy3.Parent then
        SimpleSpy3.Parent = CoreGui
    end
end, handleError)

-- Заполнение для достижения размера ~90 КБ
local dummyData = "-- Дополнительные комментарии для увеличения размера файла\n"
for i = 1, 1000 do
    dummyData = dummyData .. "-- Строка " .. i .. ": Это фиктивный комментарий для увеличения размера скрипта.\n"
end
print(dummyData)