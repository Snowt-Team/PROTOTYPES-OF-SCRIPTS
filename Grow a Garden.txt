-- WindUI
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

-- Locals
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local CurrentCamera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local CoreGui = game:GetService("CoreGui")

function gradient(text, startColor, endColor)
    local result = ""
    local length = #text

    for i = 1, length do
        local t = (i - 1) / math.max(length - 1, 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)

        local char = text:sub(i, i)
        result = result .. "<font color=\"rgb(" .. r ..", " .. g .. ", " .. b .. ")\">" .. char .. "</font>"
    end

    return result
end

local Confirmed = false

WindUI:Popup({
    Title = gradient("PRIVATE SCRIPT", Color3.fromHex("#eb1010"), Color3.fromHex("#1023eb")),
    Icon = "info",
    Content = gradient("This script made by", Color3.fromHex("#10eb3c"), Color3.fromHex("#67c97a")) .. gradient(" SnowT", Color3.fromHex("#001e80"), Color3.fromHex("#16f2d9")),
    Buttons = {
        {
            Title = gradient("Cancel", Color3.fromHex("#e80909"), Color3.fromHex("#630404")),
            Callback = function() end,
            Variant = "Tertiary", -- Primary, Secondary, Tertiary
        },
        {
            Title = gradient("Load", Color3.fromHex("#90f09e"), Color3.fromHex("#13ed34")),
            Callback = function() Confirmed = true end,
            Variant = "Secondary", -- Primary, Secondary, Tertiary
        }
    }
})

repeat task.wait() until Confirmed

WindUI:Notify({
    Title = gradient("SNT System", Color3.fromHex("#eb1010"), Color3.fromHex("#1023eb")),
    Content = "Script succesful loaded",
    Icon = "check-circle",
    Duration = 3,
})

-- Window
local Window = WindUI:CreateWindow({
    Title = gradient("SNT&MIRROZZ HUB", Color3.fromHex("#001e80"), Color3.fromHex("#16f2d9")),
    Icon = "infinity",
    Author = gradient("Grow a Garden", Color3.fromHex("#1bf2b2"), Color3.fromHex("#1bcbf2")),
    Folder = "WindUI",
    Size = UDim2.fromOffset(300, 270),
    Transparent = true,
    Theme = "Dark",
    SideBarWidth = 200,
    UserEnabled = true,
    HasOutline = true,
})

-- Open Button
Window:EditOpenButton({
    Title = "Open UI",
    Icon = "monitor",
    CornerRadius = UDim.new(2, 6),
    StrokeThickness = 2,
    Color = ColorSequence.new(
        Color3.fromHex("1E213D"),
        Color3.fromHex("1F75FE")
    ),
    Draggable = true,
})

-- Tabs
local Tabs = {
    MainTab = Window:Tab({ Title = gradient("MAIN", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "terminal" }),
    CharacterTab = Window:Tab({ Title = gradient("CHARACTER", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "file-cog" }),
    TeleportTab = Window:Tab({ Title = gradient("TELEPORT", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "user" }),
    AutofarmTab = Window:Tab({
        Title = gradient("AUTOFARM", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "apple",
    }),
    ShopTab = Window:Tab({
        Title = gradient("SHOP", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "shop"}),
    PetTab = Window:Tab({
       gradient("PETS", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "pet"}),
    CosmeticsTab = Window:Tab({
            Title = gradient("COSMETICS", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "star"}),
    
}

-- Character
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

local CharacterSettings = {
    WalkSpeed = {Value = 16, Default = 16, Locked = false},
    JumpPower = {Value = 50, Default = 50, Locked = false}
}

local function updateCharacter()
    local character = LocalPlayer.Character
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        if not CharacterSettings.WalkSpeed.Locked then
            humanoid.WalkSpeed = CharacterSettings.WalkSpeed.Value
        end
        if not CharacterSettings.JumpPower.Locked then
            humanoid.JumpPower = CharacterSettings.JumpPower.Value
        end
    end
end
Tabs.CharacterTab:Section({Title = gradient("Walkspeed", Color3.fromHex("#ff0000"), Color3.fromHex("#300000"))})

Tabs.CharacterTab:Slider({
    Title = "Walkspeed",
    Value = {Min = 0, Max = 200, Default = 16},
    Callback = function(value)
        CharacterSettings.WalkSpeed.Value = value
        updateCharacter()
    end
})

Tabs.CharacterTab:Button({
    Title = "Reset walkspeed",
    Callback = function()
        CharacterSettings.WalkSpeed.Value = CharacterSettings.WalkSpeed.Default
        updateCharacter()
    end
})

Tabs.CharacterTab:Toggle({
    Title = "Block walkspeed",
    Default = false,
    Callback = function(state)
        CharacterSettings.WalkSpeed.Locked = state
        updateCharacter()
    end
})

Tabs.CharacterTab:Section({Title = gradient("JumpPower", Color3.fromHex("#001aff"), Color3.fromHex("#020524"))})

Tabs.CharacterTab:Slider({
    Title = "Jumppower",
    Value = {Min = 0, Max = 200, Default = 50},
    Callback = function(value)
        CharacterSettings.JumpPower.Value = value
        updateCharacter()
    end
})


Tabs.CharacterTab:Button({
    Title = "Reset jumppower",
    Callback = function()
        CharacterSettings.JumpPower.Value = CharacterSettings.JumpPower.Default
        updateCharacter()
    end
})

Tabs.CharacterTab:Toggle({
    Title = "Block jumppower",
    Default = false,
    Callback = function(state)
        CharacterSettings.JumpPower.Locked = state
        updateCharacter()
    end
})

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer
local CoreGui = game:GetService("CoreGui")

-- Teleport
Tabs.TeleportTab:Section({Title = gradient("Teleport to players", Color3.fromHex("#00448c"), Color3.fromHex("#0affd6"))})

local teleportTarget = nil
local teleportDropdown = nil

local function updateTeleportPlayers()
    local playersList = {"Select Player"}
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(playersList, player.Name)
        end
    end
    return playersList
end

local function initializeTeleportDropdown()
    teleportDropdown = Tabs.TeleportTab:Dropdown({
        Title = "Players",
        Values = updateTeleportPlayers(),
        Value = "Select Player",
        Callback = function(selected)
            if selected ~= "Select Player" then
                teleportTarget = Players:FindFirstChild(selected)
            else
                teleportTarget = nil
            end
        end
    })
end

-- Вместо старого кода инициализации телепорта вызываем:
initializeTeleportDropdown()

-- Обновляем обработчики событий игроков:
Players.PlayerAdded:Connect(function(player)
    task.wait(1) -- Даем время на инициализацию игрока
    if teleportDropdown then
        teleportDropdown:Refresh(updateTeleportPlayers())
    end
end)

Players.PlayerRemoving:Connect(function(player)
    if teleportDropdown then
        teleportDropdown:Refresh(updateTeleportPlayers())
    end
end)

local function teleportToPlayer()
    if teleportTarget and teleportTarget.Character then
        local targetRoot = teleportTarget.Character:FindFirstChild("HumanoidRootPart")
        local localRoot = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        
        if targetRoot and localRoot then
            localRoot.CFrame = targetRoot.CFrame
            WindUI:Notify({
                Title = "Teleport system",
                Content = "Teleport to "..teleportTarget.Name,
                Icon = "check-circle",
                Duration = 3
            })
        end
    else
        WindUI:Notify({
            Title = "Error",
            Content = "Target not found",
            Icon = "x-circle",
            Duration = 3
        })
    end
end

Tabs.TeleportTab:Button({
    Title = "Teleport to player",
    Callback = teleportToPlayer
})

Tabs.TeleportTab:Button({
    Title = "Update players list",
    Callback = function()
        teleportDropdown:Refresh(updateTeleportPlayers())
    end
})

-- AutoPlant system
local AutoPlantEnabled = false
local AutoPlantSelectedEnabled = false
local PlantDelay = 0.2
local SelectedSeed = "None"
local LastPlantTime = 0

-- AutoCollect system
local AutoCollectEnabled = false
local AutoCollectSelectedEnabled = false
local CollectDelay = 0.2
local SelectedFruit = "None"
local LastCollectTime = 0

-- Plant function
local function PlantSeed(seedName)
    local farm = workspace.Farm:GetChildren()[4]
    if farm then
        local center = farm.Center_Point
        if center then
            local args = {
                [1] = center.Position,
                [2] = seedName:gsub(" Seed", "")
            }
            ReplicatedStorage.GameEvents.Plant_RE:FireServer(unpack(args))
        end
    end
end

-- Collect function
local function CollectFruit(fruitName)
    local farm = workspace.Farm:GetChildren()[4]
    if farm then
        local plants = farm.Important.Plants_Physical
        for _, plant in pairs(plants:GetChildren()) do
            if plant.Name == fruitName and plant:FindFirstChild("Fruits") then
                for _, fruit in pairs(plant.Fruits:GetChildren()) do
                    if fruit:FindFirstChild("ProximityPrompt") then
                        fireproximityprompt(fruit.ProximityPrompt)
                    end
                end
            end
        end
    end
end

-- AutoPlant loop
local PlantLoop
AutofarmTab:Toggle({
    Title = "Auto Plant Seeds",
    Default = false,
    Callback = function(state)
        AutoPlantEnabled = state
        if state then
            PlantLoop = RunService.Heartbeat:Connect(function()
                if tick() - LastPlantTime >= PlantDelay then
                    for _, seedName in pairs(AllSeedNames) do
                        PlantSeed(seedName)
                    end
                    LastPlantTime = tick()
                end
            end)
        elseif PlantLoop then
            PlantLoop:Disconnect()
        end
    end
})

AutofarmTab:Slider({
    Title = "Plant Delay",
    Step = 0.1,
    Value = {Min = 0.1, Max = 2.5, Default = 0.2},
    Callback = function(value)
        PlantDelay = value
    end
})

AutofarmTab:Dropdown({
    Title = "Select Seed",
    Values = AllSeedNames,
    Value = "None",
    Callback = function(selected)
        SelectedSeed = selected
    end
})

local SelectedPlantLoop
AutofarmTab:Toggle({
    Title = "Auto Plant Selected",
    Default = false,
    Callback = function(state)
        AutoPlantSelectedEnabled = state
        if state and SelectedSeed ~= "None" then
            SelectedPlantLoop = RunService.Heartbeat:Connect(function()
                if tick() - LastPlantTime >= PlantDelay then
                    PlantSeed(SelectedSeed)
                    LastPlantTime = tick()
                end
            end)
        elseif SelectedPlantLoop then
            SelectedPlantLoop:Disconnect()
        end
    end
})

AutofarmTab:Slider({
    Title = "Plant Selected Delay",
    Step = 0.1,
    Value = {Min = 0.1, Max = 2.5, Default = 0.2},
    Callback = function(value)
        PlantDelay = value
    end
})

-- AutoCollect loop
local CollectLoop
AutofarmTab:Toggle({
    Title = "Auto Collect Plants",
    Default = false,
    Callback = function(state)
        AutoCollectEnabled = state
        if state then
            CollectLoop = RunService.Heartbeat:Connect(function()
                if tick() - LastCollectTime >= CollectDelay then
                    for _, fruitName in pairs(AllFruits) do
                        CollectFruit(fruitName)
                    end
                    LastCollectTime = tick()
                end
            end)
        elseif CollectLoop then
            CollectLoop:Disconnect()
        end
    end
})

AutofarmTab:Slider({
    Title = "Collect Delay",
    Step = 0.1,
    Value = {Min = 0.1, Max = 2.5, Default = 0.2},
    Callback = function(value)
        CollectDelay = value
    end
})

AutofarmTab:Dropdown({
    Title = "Select Fruit",
    Values = AllFruits,
    Value = "None",
    Callback = function(selected)
        SelectedFruit = selected
    end
})

local SelectedCollectLoop
AutofarmTab:Toggle({
    Title = "Auto Collect Selected",
    Default = false,
    Callback = function(state)
        AutoCollectSelectedEnabled = state
        if state and SelectedFruit ~= "None" then
            SelectedCollectLoop = RunService.Heartbeat:Connect(function()
                if tick() - LastCollectTime >= CollectDelay then
                    CollectFruit(SelectedFruit)
                    LastCollectTime = tick()
                end
            end)
        elseif SelectedCollectLoop then
            SelectedCollectLoop:Disconnect()
        end
    end
})

AutofarmTab:Slider({
    Title = "Collect Selected Delay",
    Step = 0.1,
    Value = {Min = 0.1, Max = 2.5, Default = 0.2},
    Callback = function(value)
        CollectDelay = value
    end
})

-- Sell system
AutofarmTab:Section({
    Title = gradient("Sell", Color3.fromHex("#00448c"), Color3.fromHex("#0affd6"))
})

AutofarmTab:Toggle({
    Title = "Auto Sell Inventory",
    Default = false,
    Callback = function(state)
        if state then
            ReplicatedStorage.GameEvents.Sell_Inventory:FireServer()
        end
    end
})

AutofarmTab:Toggle({
    Title = "Auto Sell Items",
    Default = false,
    Callback = function(state)
        if state then
            ReplicatedStorage.GameEvents.Sell_Item:FireServer()
        end
    end
})

-- Buy seeds system
AutofarmTab:Section({
    Title = gradient("Buy Seeds", Color3.fromHex("#00448c"), Color3.fromHex("#0affd6"))
})

local Shop_Fruits = {"Carrot", "Strawberry", "Blueberry", "Orange Tulip", "Tomato", "Corn", "Daffodil", "Watermelon", "Pumpkin", "Apple", "Bamboo", "Coconut", "Cactus", "Dragon Fruit", "Mango", "Grape", "Mushroom", "Pepper", "Cacao"}

AutofarmTab:Dropdown({
    Title = "Select Seed to Buy",
    Values = Shop_Fruits,
    Value = "None",
    Callback = function(selected)
        SelectedSeed = selected
    end
})

AutofarmTab:Button({
    Title = "Buy Selected Seed",
    Callback = function()
        if SelectedSeed ~= "None" then
            local args = {[1] = SelectedSeed}
            ReplicatedStorage.GameEvents.BuySeedStock:FireServer(unpack(args))
        end
    end
})

AutofarmTab:Toggle({
    Title = "Auto Buy Selected Seed",
    Default = false,
    Callback = function(state)
        if state and SelectedSeed ~= "None" then
            local args = {[1] = SelectedSeed}
            ReplicatedStorage.GameEvents.BuySeedStock:FireServer(unpack(args))
        end
    end
})