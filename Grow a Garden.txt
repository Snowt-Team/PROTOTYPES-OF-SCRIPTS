-- WindUI
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

-- Locals
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local CurrentCamera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer
local CoreGui = game:GetService("CoreGui")
local SellStand = workspace.NPCS:FindFirstChild("Sell Stands")



-- Gradient Function
function gradient(text, startColor, endColor)
    local result = ""
    local length = #text
    for i = 1, length do
        local t = (i - 1) / math.max(length - 1, 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        local char = text:sub(i, i)
        result = result .. "<font color=\"rgb(" .. r ..", " .. g .. ", " .. b .. ")\">" .. char .. "</font>"
    end
    return result
end

-- Popup
local Confirmed = false
WindUI:Popup({
    Title = gradient("SNT HUB", Color3.fromHex("#eb1010"), Color3.fromHex("#1023eb")),
    Icon = "info",
    Content = gradient("This script made by", Color3.fromHex("#10eb3c"), Color3.fromHex("#67c97a")) .. gradient(" SnowT", Color3.fromHex("#001e80"), Color3.fromHex("#16f2d9")),
    Buttons = {
        {
            Title = gradient("Cancel", Color3.fromHex("#e80909"), Color3.fromHex("#630404")),
            Callback = function() end,
            Variant = "Tertiary",
        },
        {
            Title = gradient("Load", Color3.fromHex("#90f09e"), Color3.fromHex("#13ed34")),
            Callback = function() Confirmed = true end,
            Variant = "Secondary",
        }
    }
})

repeat task.wait() until Confirmed

WindUI:Notify({
    Title = gradient("SNT System", Color3.fromHex("#eb1010"), Color3.fromHex("#1023eb")),
    Content = "Script successfully loaded",
    Icon = "check-circle",
    Duration = 3,
})

-- Window
local Window = WindUI:CreateWindow({
    Title = gradient("SNT&MIRROZZ HUB", Color3.fromHex("#001e80"), Color3.fromHex("#16f2d9")),
    Icon = "infinity",
    Author = gradient("Grow a Garden", Color3.fromHex("#1bf2b2"), Color3.fromHex("#1bcbf2")),
    Folder = "WindUI",
    Size = UDim2.fromOffset(300, 270),
    Transparent = true,
    Theme = "Dark",
    SideBarWidth = 200,
    UserEnabled = true,
    HasOutline = true,
})

-- Open Button
Window:EditOpenButton({
    Title = "Open UI",
    Icon = "monitor",
    CornerRadius = UDim.new(2, 6),
    StrokeThickness = 2,
    Color = ColorSequence.new(
        Color3.fromHex("1E213D"),
        Color3.fromHex("1F75FE")
    ),
    Draggable = true,
})

-- Tabs
local Tabs = {
    MainTab = Window:Tab({ Title = gradient("MAIN", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "terminal" }),
    CharacterTab = Window:Tab({ Title = gradient("CHARACTER", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "file-cog" }),
    TeleportTab = Window:Tab({ Title = gradient("TELEPORT", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "user" }),
    AutofarmTab = Window:Tab({
        Title = gradient("AUTOFARM", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "apple",
    }),
    ShopTab = Window:Tab({
        Title = gradient("SHOP", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "shovel"}),
    PetTab = Window:Tab({
        Title = gradient("PETS", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "cat"}),
    EventTab = Window:Tab({
        Title = gradient("EVENT", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "circle"}),
    CosmTab = Window:Tab({
        Title = gradient("COSMETICS", Color3.fromHex("#ffffff"), Color3.fromHex("#636363")), Icon = "star"}),
}

-- Character
local CharacterSettings = {
    WalkSpeed = {Value = 16, Default = 16, Locked = false},
    JumpPower = {Value = 50, Default = 50, Locked = false}
}

local function updateCharacter()
    local character = LocalPlayer.Character
    local humanoid = character and character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        if not CharacterSettings.WalkSpeed.Locked then
            humanoid.WalkSpeed = CharacterSettings.WalkSpeed.Value
        end
        if not CharacterSettings.JumpPower.Locked then
            humanoid.JumpPower = CharacterSettings.JumpPower.Value
        end
    end
end

Tabs.CharacterTab:Section({Title = gradient("Walkspeed", Color3.fromHex("#ff0000"), Color3.fromHex("#300000"))})

Tabs.CharacterTab:Slider({
    Title = "Walkspeed",
    Value = {Min = 0, Max = 200, Default = 16},
    Callback = function(value)
        CharacterSettings.WalkSpeed.Value = value
        updateCharacter()
    end
})

Tabs.CharacterTab:Button({
    Title = "Reset walkspeed",
    Callback = function()
        CharacterSettings.WalkSpeed.Value = CharacterSettings.WalkSpeed.Default
        updateCharacter()
    end
})

Tabs.CharacterTab:Toggle({
    Title = "Block walkspeed",
    Default = false,
    Callback = function(state)
        CharacterSettings.WalkSpeed.Locked = state
        updateCharacter()
    end
})

Tabs.CharacterTab:Section({Title = gradient("JumpPower", Color3.fromHex("#001aff"), Color3.fromHex("#020524"))})

Tabs.CharacterTab:Slider({
    Title = "Jumppower",
    Value = {Min = 0, Max = 200, Default = 50},
    Callback = function(value)
        CharacterSettings.JumpPower.Value = value
        updateCharacter()
    end
})

Tabs.CharacterTab:Button({
    Title = "Reset jumppower",
    Callback = function()
        CharacterSettings.JumpPower.Value = CharacterSettings.JumpPower.Default
        updateCharacter()
    end
})

Tabs.CharacterTab:Toggle({
    Title = "Block jumppower",
    Default = false,
    Callback = function(state)
        CharacterSettings.JumpPower.Locked = state
        updateCharacter()
    end
})

-- Teleport
Tabs.TeleportTab:Section({Title = gradient("Teleport to players", Color3.fromHex("#00448c"), Color3.fromHex("#0affd6"))})

local teleportTarget = nil
local teleportDropdown = nil

local function updateTeleportPlayers()
    local playersList = {"Select Player"}
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(playersList, player.Name)
        end
    end
    return playersList
end

local function initializeTeleportDropdown()
    teleportDropdown = Tabs.TeleportTab:Dropdown({
        Title = "Players",
        Values = updateTeleportPlayers(),
        Value = "Select Player",
        Callback = function(selected)
            if selected ~= "Select Player" then
                teleportTarget = Players:FindFirstChild(selected)
            else
                teleportTarget = nil
            end
        end
    })
end

initializeTeleportDropdown()

Players.PlayerAdded:Connect(function(player)
    task.wait(1)
    if teleportDropdown then
        teleportDropdown:Refresh(updateTeleportPlayers())
    end
end)

Players.PlayerRemoving:Connect(function(player)
    if teleportDropdown then
        teleportDropdown:Refresh(updateTeleportPlayers())
    end
end)

local function teleportToPlayer()
    if teleportTarget and teleportTarget.Character then
        local targetRoot = teleportTarget.Character:FindFirstChild("HumanoidRootPart")
        local localRoot = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if targetRoot and localRoot then
            localRoot.CFrame = targetRoot.CFrame
            WindUI:Notify({
                Title = "Teleport System",
                Content = "Teleported to " .. teleportTarget.Name,
                Icon = "check-circle",
                Duration = 3
            })
        else
            WindUI:Notify({
                Title = "Error",
                Content = "Target not found",
                Icon = "x-circle",
                Duration = 3
            })
        end
    else
        WindUI:Notify({
            Title = "Error",
            Content = "Target not found",
            Icon = "x-circle",
            Duration = 3
        })
    end
end

Tabs.TeleportTab:Button({
    Title = "Teleport to Player",
    Callback = teleportToPlayer
})

Tabs.TeleportTab:Button({
    Title = "Update Players List",
    Callback = function()
        teleportDropdown:Refresh(updateTeleportPlayers())
    end
})

-- Required Arrays from GaG_Database.txt
local AllSeedNames = {
    "Carrot Seed", "Strawberry Seed", "Blueberry Seed", "Orange Tulip", "Tomato Seed",
    "Corn Seed", "Daffodil Seed", "Watermelon Seed", "Pumpkin Seed", "Apple Seed",
    "Bamboo Seed", "Coconut Seed", "Cactus Seed", "Dragon Fruit Seed", "Mango Seed",
    "Grape Seed", "Mushroom Seed", "Pepper Seed", "Cacao Seed", "Beanstalk Seed",
    "Pineapple Seed", "Raspberry Seed", "Peach Seed", "Papaya Seed", "Banana Seed",
    "Passionfruit Seed", "Soul Fruit Seed", "Cursed Fruit Seed", "Succulent Seed",
    "Cranberry Seed", "Durian Seed", "Eggplant Seed", "Lotus Seed", "Venus Fly Trap Seed",
    "Pear Seed", "Lemon Seed", "Cherry Blossom Seed", "Avocado Seed", "Nightshade Seed",
    "Glowshroom Seed", "Mint Seed", "Moonflower Seed", "Starfruit Seed", "Moonglow Seed",
    "Moon Blossom Seed", "Chocolate Carrot Seed", "Red Lollipop Seed", "Candy Sunflower Seed",
    "Easter Egg Seed", "Candy Blossom Seed", "Crimson Vine Seed", "Moon Melon Seed",
    "Blood Banana Seed", "Moon Mango Seed", "Celestiberry Seed"
}

local AllFruits = {
    "Carrot", "Strawberry", "Blueberry", "Orange Tulip", "Tomato", 
    "Corn", "Daffodil", "Watermelon", "Pumpkin", "Apple", 
    "Bamboo", "Coconut", "Cactus", "Dragon Fruit", "Mango", 
    "Grape", "Mushroom", "Pepper", "Cacao", "Beanstalk", 
    "Chocolate Carrot", "Red Lollipop", "Blue Lollipop", "Candy Sunflower", 
    "Easter Egg", "Candy Blossom", "Peach", "Raspberry", "Pineapple", 
    "Papaya", "Banana", "Passionfruit", "Soul Fruit", "Cursed Fruit", 
    "Mega Mushroom", "Cherry Blossom", "Purple Cabbage", "Lemon", "Pear", 
    "Crocus", "Pink Tulip", "Succulent", "Avocado", "Cranberry", 
    "Durian", "Eggplant", "Lotus", "Venus Fly Trap", "Nightshade", 
    "Glowshroom", "Mint", "Moonflower", "Starfruit", "Moonglow", 
    "Moon Blossom", "Crimson Vine", "Moon Melon", "Blood Banana", 
    "Celestiberry", "Moon Mango"
}

local Shop_Fruits = {
    "Carrot", "Strawberry", "Blueberry", "Orange Tulip", "Tomato", 
    "Corn", "Daffodil", "Watermelon", "Pumpkin", "Apple", 
    "Bamboo", "Coconut", "Cactus", "Dragon Fruit", "Mango", 
    "Grape", "Mushroom", "Pepper", "Cacao"
}

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer
local SellStand = workspace.NPCS:FindFirstChild("Sell Stands")

-- Access Player's SeedStock
local function getPlayerSeedStock()
    local playerData = ReplicatedStorage.Data:FindFirstChild(LocalPlayer.Name)
    if playerData and playerData:FindFirstChild("SeedStock") and playerData.SeedStock:FindFirstChild("Stocks") then
        return playerData.SeedStock.Stocks
    end
    return nil
end

-- Farm Detection
local PlayerFarmNumber = nil

local function findPlayerFarm()
    for i = 1, 6 do
        local farm = workspace.Farm:GetChildren()[i]
        if farm and farm:FindFirstChild("Important") and farm.Important:FindFirstChild("Data") and farm.Important.Data:FindFirstChild("Owner") then
            if farm.Important.Data.Owner.Value == LocalPlayer.Name then
                PlayerFarmNumber = i
                return farm
            end
        end
    end
    WindUI:Notify({
        Title = "Error",
        Content = "Player farm not found",
        Icon = "x-circle",
        Duration = 3
    })
    return nil
end

-- Call farm detection on script load
findPlayerFarm()

-- Plant Function
local function PlantSeed(seedName)
    if not PlayerFarmNumber then
        WindUI:Notify({
            Title = "Error",
            Content = "Player farm not found",
            Icon = "x-circle",
            Duration = 3
        })
        return false
    end

    local farm = workspace.Farm:GetChildren()[PlayerFarmNumber]
    if not (farm and farm:FindFirstChild("Important") and farm.Important:FindFirstChild("Plant_Locations")) then
        WindUI:Notify({
            Title = "Error",
            Content = "Plant_Locations not found",
            Icon = "x-circle",
            Duration = 3
        })
        return false
    end

    local plantLocations = farm.Important.Plant_Locations:GetChildren()
    for _, location in ipairs(plantLocations) do
        if location:FindFirstChild("Can_Plant") and location.Can_Plant.Value then
            local args = {
                [1] = location.Position,
                [2] = seedName:gsub(" Seed", "")
            }
            local success, err = pcall(function()
                ReplicatedStorage.GameEvents.Plant_RE:FireServer(unpack(args))
            end)
            if success then
                WindUI:Notify({
                    Title = "Autofarm System",
                    Content = "Planted " .. seedName,
                    Icon = "check-circle",
                    Duration = 2
                })
                return true
            else
                WindUI:Notify({
                    Title = "Error",
                    Content = "Failed to plant " .. seedName .. ": " .. tostring(err),
                    Icon = "x-circle",
                    Duration = 3
                })
            end
        end
    end
    WindUI:Notify({
        Title = "Error",
        Content = "No available plant locations",
        Icon = "x-circle",
        Duration = 3
    })
    return false
end

-- Collect Function
local function CollectFruit(fruitName)
    if not PlayerFarmNumber then
        WindUI:Notify({
            Title = "Error",
            Content = "Player farm not found",
            Icon = "x-circle",
            Duration = 3
        })
        return
    end

    local farm = workspace.Farm:GetChildren()[PlayerFarmNumber]
    if not (farm and farm:FindFirstChild("Important") and farm.Important:FindFirstChild("Plants_Physical")) then
        WindUI:Notify({
            Title = "Error",
            Content = "Plants_Physical not found",
            Icon = "x-circle",
            Duration = 3
        })
        return
    end

    local plants = farm.Important.Plants_Physical:GetChildren()
    local collected = 0
    for _, plant in ipairs(plants) do
        if plant.Name == fruitName and plant:FindFirstChild("Fruits") then
            for _, fruit in ipairs(plant.Fruits:GetChildren()) do
                if fruit:FindFirstChild("ProximityPrompt") then
                    local success, err = pcall(function()
                        fireproximityprompt(fruit.ProximityPrompt, 1)
                    end)
                    if success then
                        WindUI:Notify({
                            Title = "Autofarm System",
                            Content = "Collected " .. fruitName,
                            Icon = "check-circle",
                            Duration = 2
                        })
                        collected = collected + 1
                    else
                        WindUI:Notify({
                            Title = "Error",
                            Content = "Failed to collect " .. fruitName .. ": " .. tostring(err),
                            Icon = "x-circle",
                            Duration = 3
                        })
                    end
                    task.wait(0.1) -- Micro-delay to prevent lag
                    if collected >= 5 then -- Limit per cycle
                        return
                    end
                end
            end
        end
    end
end

-- Teleport Functions
local function teleportToSellStand()
    if not SellStand or not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        WindUI:Notify({
            Title = "Error",
            Content = "Sell Stand not found or no character",
            Icon = "x-circle",
            Duration = 3
        })
        return false
    end
    local sellStandPos = SellStand.Position
    LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(sellStandPos + Vector3.new(0, 3, 0))
    task.wait(0.5) -- Increased delay for server sync
    WindUI:Notify({
        Title = "Shop System",
        Content = "Teleported to Sell Stand",
        Icon = "check-circle",
        Duration = 2
    })
    return true
end

local function teleportToFarm()
    if not PlayerFarmNumber then
        WindUI:Notify({
            Title = "Error",
            Content = "Player farm not found",
            Icon = "x-circle",
            Duration = 3
        })
        return false
    end
    local farm = workspace.Farm:GetChildren()[PlayerFarmNumber]
    if not (farm and farm:FindFirstChild("Center_Point")) then
        WindUI:Notify({
            Title = "Error",
            Content = "Farm Center_Point not found",
            Icon = "x-circle",
            Duration = 3
        })
        return false
    end
    local farmPos = farm.Center_Point.Position
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(farmPos + Vector3.new(0, 3, 0))
        task.wait(0.5) -- Increased delay for server sync
        WindUI:Notify({
            Title = "Shop System",
            Content = "Teleported back to Farm " .. PlayerFarmNumber,
            Icon = "check-circle",
            Duration = 2
        })
        return true
    end
    return false
end

-- Autofarm Variables
local AutoPlantEnabled = false
local AutoPlantSelectedEnabled = false
local PlantDelay = 0.2
local SelectedSeed = "None"
local LastPlantTime = 0

local AutoCollectEnabled = false
local AutoCollectSelectedEnabled = false
local CollectDelay = 0.2
local SelectedFruit = "None"
local LastCollectTime = 0

local BuyDelay = 0.2
local AutoBuyEnabled = false
local AutoBuyAllEnabled = false
local SellInterval = 5 -- Default sell interval in seconds
local AutoSellInventoryEnabled = false
local LastSellTime = 0
local CurrentBuyIndex = 1

-- Autofarm Tab
Tabs.AutofarmTab:Section({
    Title = gradient("Farm Info", Color3.fromHex("#00448c"), Color3.fromHex("#0affd6"))
})

Tabs.AutofarmTab:Button({
    Title = "Show Farm Number",
    Callback = function()
        if PlayerFarmNumber then
            WindUI:Notify({
                Title = "Farm Info",
                Content = "Your farm number is " .. PlayerFarmNumber,
                Icon = "info",
                Duration = 3
            })
        else
            WindUI:Notify({
                Title = "Error",
                Content = "Player farm not found",
                Icon = "x-circle",
                Duration = 3
            })
        end
    end
})

Tabs.AutofarmTab:Section({
    Title = gradient("Plant", Color3.fromHex("#00448c"), Color3.fromHex("#0affd6"))
})

local PlantLoop
Tabs.AutofarmTab:Toggle({
    Title = "Auto Plant Seeds",
    Default = false,
    Callback = function(state)
        AutoPlantEnabled = state
        if state then
            PlantLoop = RunService.Heartbeat:Connect(function()
                if tick() - LastPlantTime >= PlantDelay then
                    local planted = 0
                    for _, seedName in ipairs(AllSeedNames) do
                        if PlantSeed(seedName) then
                            planted = planted + 1
                        end
                        task.wait(0.1) -- Micro-delay to prevent lag
                        if planted >= 5 then -- Limit per cycle
                            break
                        end
                    end
                    LastPlantTime = tick()
                end
            end)
        elseif PlantLoop then
            PlantLoop:Disconnect()
        end
    end
})

Tabs.AutofarmTab:Slider({
    Title = "Plant Delay",
    Step = 0.1,
    Value = {Min = 0.1, Max = 2.5, Default = 0.2},
    Callback = function(value)
        PlantDelay = value
    end
})

Tabs.AutofarmTab:Dropdown({
    Title = "Select Seed",
    Values = AllSeedNames,
    Value = "None",
    Callback = function(selected)
        SelectedSeed = selected
    end
})

local SelectedPlantLoop
Tabs.AutofarmTab:Toggle({
    Title = "Auto Plant Selected",
    Default = false,
    Callback = function(state)
        AutoPlantSelectedEnabled = state
        if state and SelectedSeed ~= "None" then
            SelectedPlantLoop = RunService.Heartbeat:Connect(function()
                if tick() - LastPlantTime >= PlantDelay then
                    PlantSeed(SelectedSeed)
                    LastPlantTime = tick()
                end
            end)
        elseif SelectedPlantLoop then
            SelectedPlantLoop:Disconnect()
        end
    end
})

Tabs.AutofarmTab:Slider({
    Title = "Plant Selected Delay",
    Step = 0.1,
    Value = {Min = 0.1, Max = 2.5, Default = 0.2},
    Callback = function(value)
        PlantDelay = value
    end
})

Tabs.AutofarmTab:Section({
    Title = gradient("Collect", Color3.fromHex("#00448c"), Color3.fromHex("#0affd6"))
})

local CollectLoop
Tabs.AutofarmTab:Toggle({
    Title = "Auto Collect Plants",
    Default = false,
    Callback = function(state)
        AutoCollectEnabled = state
        if state then
            CollectLoop = RunService.Heartbeat:Connect(function()
                if tick() - LastCollectTime >= CollectDelay then
                    for _, fruitName in ipairs(AllFruits) do
                        CollectFruit(fruitName)
                        task.wait(0.1) -- Micro-delay to prevent lag
                    end
                    LastCollectTime = tick()
                end
            end)
        elseif CollectLoop then
            CollectLoop:Disconnect()
        end
    end
})

Tabs.AutofarmTab:Slider({
    Title = "Collect Delay",
    Step = 0.1,
    Value = {Min = 0.1, Max = 2.5, Default = 0.2},
    Callback = function(value)
        CollectDelay = value
    end
})

Tabs.AutofarmTab:Dropdown({
    Title = "Select Fruit",
    Values = AllFruits,
    Value = "None",
    Callback = function(selected)
        SelectedFruit = selected
    end
})

local SelectedCollectLoop
Tabs.AutofarmTab:Toggle({
    Title = "Auto Collect Selected",
    Default = false,
    Callback = function(state)
        AutoCollectSelectedEnabled = state
        if state and SelectedFruit ~= "None" then
            SelectedCollectLoop = RunService.Heartbeat:Connect(function()
                if tick() - LastCollectTime >= CollectDelay then
                    CollectFruit(SelectedFruit)
                    LastCollectTime = tick()
                end
            end)
        elseif SelectedCollectLoop then
            SelectedCollectLoop:Disconnect()
        end
    end
})

Tabs.AutofarmTab:Slider({
    Title = "Collect Selected Delay",
    Step = 0.1,
    Value = {Min = 0.1, Max = 2.5, Default = 0.2},
    Callback = function(value)
        CollectDelay = value
    end
})

-- Shop Tab
Tabs.ShopTab:Section({
    Title = gradient("Buy Seeds", Color3.fromHex("#00448c"), Color3.fromHex("#0affd6"))
})

local AutoBuyLoop
local AutoBuyAllLoop
local buyDropdown

buyDropdown = Tabs.ShopTab:Dropdown({
    Title = "Select Seed to Buy",
    Values = Shop_Fruits,
    Value = "None",
    Callback = function(selected)
        SelectedSeed = selected
    end
})

Tabs.ShopTab:Button({
    Title = "Buy Selected Seed",
    Callback = function()
        if SelectedSeed ~= "None" then
            local args = {[1] = SelectedSeed}
            local success, err = pcall(function()
                ReplicatedStorage.GameEvents.BuySeedStock:FireServer(unpack(args))
            end)
            if success then
                WindUI:Notify({
                    Title = "Shop System",
                    Content = "Bought " .. SelectedSeed .. " Seed",
                    Icon = "check-circle",
                    Duration = 3
                })
            else
                WindUI:Notify({
                    Title = "Error",
                    Content = "Failed to buy " .. SelectedSeed .. " Seed: " .. tostring(err),
                    Icon = "x-circle",
                    Duration = 3
                })
            end
        else
            WindUI:Notify({
                Title = "Error",
                Content = "No seed selected",
                Icon = "x-circle",
                Duration = 3
            })
        end
    end
})

Tabs.ShopTab:Toggle({
    Title = "Auto Buy Selected Seed",
    Default = false,
    Callback = function(state)
        AutoBuyEnabled = state
        if state and SelectedSeed ~= "None" then
            AutoBuyLoop = RunService.Heartbeat:Connect(function()
                if tick() - LastPlantTime >= BuyDelay then
                    local args = {[1] = SelectedSeed}
                    local success, err = pcall(function()
                        ReplicatedStorage.GameEvents.BuySeedStock:FireServer(unpack(args))
                    end)
                    if success then
                        WindUI:Notify({
                            Title = "Shop System",
                            Content = "Auto Bought " .. SelectedSeed .. " Seed",
                            Icon = "check-circle",
                            Duration = 2
                        })
                    else
                        WindUI:Notify({
                            Title = "Error",
                            Content = "Failed to buy " .. SelectedSeed .. " Seed: " .. tostring(err),
                            Icon = "x-circle",
                            Duration = 2
                        })
                    end
                    LastPlantTime = tick()
                end
            end)
        elseif AutoBuyLoop then
            AutoBuyLoop:Disconnect()
        end
    end
})

Tabs.ShopTab:Toggle({
    Title = "Auto Buy All Seeds",
    Default = false,
    Callback = function(state)
        AutoBuyAllEnabled = state
        if state then
            AutoBuyAllLoop = RunService.Heartbeat:Connect(function()
                if tick() - LastPlantTime >= BuyDelay then
                    local seedStock = getPlayerSeedStock()
                    local availableSeeds = {}
                    if seedStock then
                        for _, seed in ipairs(Shop_Fruits) do
                            local seedData = seedStock:FindFirstChild(seed)
                            if seedData and seedData.Value > 0 then
                                table.insert(availableSeeds, seed)
                            end
                        end
                    end
                    if #availableSeeds > 0 then
                        local seed = availableSeeds[CurrentBuyIndex] or availableSeeds[1]
                        local args = {[1] = seed}
                        local success, err = pcall(function()
                            ReplicatedStorage.GameEvents.BuySeedStock:FireServer(unpack(args))
                        end)
                        if success then
                            WindUI:Notify({
                                Title = "Shop System",
                                Content = "Auto Bought " .. seed .. " Seed",
                                Icon = "check-circle",
                                Duration = 2
                            })
                            local seedData = seedStock and seedStock:FindFirstChild(seed)
                            if not seedData or seedData.Value <= 0 then
                                CurrentBuyIndex = CurrentBuyIndex + 1
                            end
                            if CurrentBuyIndex > #availableSeeds then
                                CurrentBuyIndex = 1
                            end
                        else
                            WindUI:Notify({
                                Title = "Error",
                                Content = "Failed to buy " .. seed .. " Seed: " .. tostring(err),
                                Icon = "x-circle",
                                Duration = 2
                            })
                            CurrentBuyIndex = CurrentBuyIndex + 1
                            if CurrentBuyIndex > #availableSeeds then
                                CurrentBuyIndex = 1
                            end
                        end
                    else
                        WindUI:Notify({
                            Title = "Shop System",
                            Content = "No seeds in stock",
                            Icon = "info",
                            Duration = 2
                        })
                    end
                    LastPlantTime = tick()
                end
            end)
        elseif AutoBuyAllLoop then
            AutoBuyAllLoop:Disconnect()
            CurrentBuyIndex = 1
        end
    end
})

Tabs.ShopTab:Slider({
    Title = "Buy Delay",
    Step = 0.1,
    Value = {Min = 0.1, Max = 2.5, Default = 0.2},
    Callback = function(value)
        BuyDelay = value
    end
})

Tabs.ShopTab:Section({
    Title = gradient("Sell", Color3.fromHex("#00448c"), Color3.fromHex("#0affd6"))
})

local AutoSellInventoryLoop

Tabs.ShopTab:Toggle({
    Title = "Auto Sell Inventory",
    Default = false,
    Callback = function(state)
        AutoSellInventoryEnabled = state
        if state then
            AutoSellInventoryLoop = RunService.Heartbeat:Connect(function()
                if tick() - LastSellTime >= SellInterval then
                    if teleportToSellStand() then
                        local success, err = pcall(function()
                            ReplicatedStorage.GameEvents.Sell_Inventory:FireServer()
                        end)
                        if success then
                            WindUI:Notify({
                                Title = "Shop System",
                                Content = "Sold Inventory",
                                Icon = "check-circle",
                                Duration = 2
                            })
                        else
                            WindUI:Notify({
                                Title = "Error",
                                Content = "Failed to sell inventory: " .. tostring(err),
                                Icon = "x-circle",
                                Duration = 3
                            })
                        end
                        teleportToFarm()
                    end
                    LastSellTime = tick()
                end
            end)
        elseif AutoSellInventoryLoop then
            AutoSellInventoryLoop:Disconnect()
        end
    end
})

Tabs.ShopTab:Slider({
    Title = "Sell Interval (Seconds)",
    Step = 1,
    Value = {Min = 1, Max = 60, Default = 5},
    Callback = function(value)
        SellInterval = value
    end
})
